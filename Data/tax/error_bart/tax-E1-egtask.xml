<?xml version="1.0" encoding="UTF-8"?>
<task>
    <!-- ****************************************************
                      DATABASES
    **************************************************** -->
    <source>
        <!-- The (optional) source database stores tables that 
        cannot be modified (for example master data) 
        BART will not introduce changes in these tables -->
        <type>DBMS</type>
        <access-configuration>
            <driver>org.postgresql.Driver</driver>
            <uri>jdbc:postgresql:bart_example</uri>
            <schema>source</schema>
            <login>pguser</login>
            <password>pguser</password>
        </access-configuration>
        <import>
            <input type="csv" separator="," table="md">tax-data-0010k.csv</input>
        </import>
    </source>

    <target> 
        <type>DBMS</type>
        <access-configuration>
            <driver>org.postgresql.Driver</driver>
            <uri>jdbc:postgresql:bart_example</uri>
            <schema>target</schema>
            <login>pguser</login>
            <password>pguser</password>
        </access-configuration>
        <import>
            <input type="csv" separator="," table="tax">tax-data-0010k.csv</input>
        </import>
    </target>

    <!-- ****************************************************
                    DEPENDENCIES
    **************************************************** -->
    <dependencies>
<![CDATA[
DCs:

fd1: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $zip1 == $zip2, $city1 != $city2 -> #fail.  
    
fd2: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $zip1 == $zip2, $state1 != $state2 -> #fail.  

fd3: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $haschild1 == $haschild2, $childexemp1 != $childexemp2 -> #fail.  

fd4: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $zip1 == $zip2, $childexemp1 != $childexemp2 -> #fail.    

fd5: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $maritalstatus1 == $maritalstatus2, $singleexemp1 != $singleexemp2 -> #fail.    
    
fd6: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $zip1 == $zip2, $singleexemp1 != $singleexemp2 -> #fail.    

fd7: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
   $zip1 == $zip2, $marriedexemp1 != $marriedexemp2 -> #fail.
   
fd8: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $maritalstatus1 == $maritalstatus2, $marriedexemp1 != $marriedexemp2 -> #fail.
    
fd9: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $fname1 == $fname2, $gender1 != $gender2 -> #fail.
    
fd10: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $areacode1 == $areacode2, $state1 != $state2 -> #fail.   
    
fd11: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $phone1 == $phone2, $areacode1 != $areacode2 -> #fail.
    
fd12: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $zip1 == $zip2, $areacode1 != $areacode2 -> #fail.
 
// FD: Zip -> City
//e1: person(ssn: $ssn1, name: $n1, surname: $s1, city: $c1, zip: $z1), 
//person(ssn: $ssn2, name: $n2, surname: $s2, city: $c2, zip: $z2), 
//    $z1 == $z2, $c1 != $c2 -> #fail.
]]>
    </dependencies>

    <!-- ****************************************************
                      CONFIGURATION
    **************************************************** -->
    <configuration>
        <!-- To print extra information in the ouput (default = false) -->
        <printLog>true</printLog>

        <!-- To load DB every time on start (default = false) -->
        <recreateDBOnStart>true</recreateDBOnStart>

        <!-- To apply the changes (default = false) -->
        <applyCellChanges>true</applyCellChanges>

        <!-- To  apply cell changes on a copy of the original target, with a custom suffix (default = true) -->
        <cloneTargetSchema>true</cloneTargetSchema>
        <cloneSuffix>_dirty</cloneSuffix>

        <!-- To export the dirty db -->
        <exportDirtyDB>true</exportDirtyDB>
        <exportDirtyDBPath>E1/</exportDirtyDBPath>
        <exportDirtyDBType>CSV</exportDirtyDBType>

        <!-- To export the changes -->
        <exportCellChanges>true</exportCellChanges>
        <exportCellChangesPath>E1/changes.csv</exportCellChangesPath>

        <!-- To compute an estimate of the reparability (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To generate all possible changes (default = false - slow, only for toy examples)-->
        <generateAllChanges>false</generateAllChanges>

        <!-- To avoid interactions among changes. (default = true) -->
        <avoidInteractions>true</avoidInteractions>

        <!-- To check, at the end of the process, if changes are detectable. (default = false) -->
        <checkChanges>true</checkChanges>

        <!-- To compute an estimate of the repairability. Requires checkChanges = true. (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To use an optimized strategy for updates. (default = true) -->
        <useDeltaDBForChanges>true</useDeltaDBForChanges>

        <!-- Error percentages for dependencies and comparisons 
        All percentages are wrt table sizes (# tuples) -->
        <errorPercentages>
            <defaultPercentage>0.0</defaultPercentage>
            <vioGenQueries>
                <vioGenQuery id="fd1">
                    <comparison>(city1 != city2)</comparison>
                    <percentage>10.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="fd2">
                    <comparison>(state1 != state2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="fd3">
                    <comparison>(childexemp1 != childexemp2)</comparison>
                    <percentage>10.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="fd4">
                    <comparison>(childexemp1 != childexemp2)</comparison>
                    <percentage>10.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="fd5">
                    <comparison>(singleexemp1 != singleexemp2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="fd6">
                    <comparison>(singleexemp1 != singleexemp2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="fd7">
                    <comparison>(marriedexemp1 != marriedexemp2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="fd10">
                    <comparison>(state1 != state2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="fd11">
                    <comparison>(areacode1 != areacode2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="fd12">
                    <comparison>(areacode1 != areacode2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
            </vioGenQueries>
        </errorPercentages>
        <dirtyStrategies>
            <defaultStrategy>
                <strategy>TypoRandom</strategy>
            </defaultStrategy>
        </dirtyStrategies>
    </configuration>
</task>

