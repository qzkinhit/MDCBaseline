<?xml version="1.0" encoding="UTF-8"?>
<task>
    <source>
        <type>DBMS</type>
        <access-configuration>
            <driver>org.postgresql.Driver</driver>
            <uri>jdbc:postgresql://localhost:5433/alpha</uri>
            <schema>tax20k_dependencies_source</schema>
            <login>DataCleanuser</login>
            <password>abcd1234</password>
        </access-configuration>
        <import createTables="true">
            <input table="consttablecf1" type="XML">xml/consttablecf1.xml</input>
            <input table="consttablecf2" type="XML">xml/consttablecf2.xml</input>
        </import>
    </source>
    <target>
        <type>DBMS</type>
        <access-configuration>
            <driver>org.postgresql.Driver</driver>
            <uri>jdbc:postgresql://localhost:5433/alpha</uri>
            <schema>tax20k_dependencies</schema>
            <login>DataCleanuser</login>
            <password>abcd1234</password>
        </access-configuration>
        <import createTables="true">
            <input table="tax" type="XML">xml/20k_tax.xml</input>
        </import>
    </target>
    <dependencies><![CDATA[DCs:
//CFD: not(t1.AreaCode= 401&t1.State!=RI)
cfd1: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1),
    consttablecf1(areacode: $areacode2, state: $state2), 
    $areacode1 == $areacode2, $state1 != $state2 -> #fail.  

//CFD: not(t1.State=NV&t1.Zip<50275)
cfd2: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1),
    consttablecf2(zip: $zip2, state: $state2), 
    $zip1 < $zip2, $state1 == $state2 -> #fail. 

//FD: not(t1.AreaCode=t2.AreaCode&t1.Phone=t2.Phone)
fd1: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $areacode1 == $areacode2, $phone1 == $phone2 -> #fail.  
    
//FD: not(t1.City!=t2.City&t1.Zip=t2.Zip)
fd2: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $zip1 == $zip2, $city1 != $city2 -> #fail.  

//FD: not(t1.AreaCode=t2.AreaCode&t1.State!=t2.State)
fd3: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $areacode1 == $areacode2, $state1 == $state2 -> #fail.  

//FD: not(t1.State!=t2.State&t1.Zip=t2.Zip)
fd5: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $zip1 == $zip2, $state1 != $state2 -> #fail.    

//DC: not(t1.State=t2.State&t1.HasChild=t2.HasChild&t1.ChildExemp!=t2.ChildExemp)
dc1: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $haschild1 == $haschild2, $state1 == $state2, $childexemp1 != $childexemp2 -> #fail.    
    
//DC: not(t1.State=t2.State&t1.HasChild=t2.HasChild&t1.ChildExemp!=t2.ChildExemp)
dc2: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
    $maritalstatus1 == $maritalstatus2, $state1 == $state2, $singleexemp1 != $singleexemp2 -> #fail.    

//DC: not(t1.State=t2.State&t1.Salary>t2.Salary&t1.Rate<t2.Rate)
//dc3: tax(fname: $fname1,lname: $lname1 ,gender: $gender1 ,areacode: $areacode1 ,phone: $phone1 ,city: $city1 ,state: $state1 ,zip: $zip1 ,maritalstatus: $maritalstatus1 ,haschild: $haschild1 ,salary: $salary1 ,rate: $rate1 ,singleexemp: $singleexemp1 ,marriedexemp: $marriedexemp1 ,childexemp: $childexemp1), tax(fname: $fname2,lname: $lname2 ,gender: $gender2 ,areacode: $areacode2 ,phone: $phone2 ,city: $city2 ,state: $state2 ,zip: $zip2 ,maritalstatus: $maritalstatus2 ,haschild: $haschild2 ,salary: $salary2 ,rate: $rate2 ,singleexemp: $singleexemp2 ,marriedexemp: $marriedexemp2 ,childexemp: $childexemp2),
//  $salary1 > $salary2, $state1 == $state2, $rate1 < $rate2 -> #fail.]]></dependencies>
    <authoritativeSources>
        <source>consttablecf1</source>
        <source>consttablecf2</source>
    </authoritativeSources>
    <configuration>
        <printLog>true</printLog>
        <checkChanges>true</checkChanges>
        <recreateDBOnStart>false</recreateDBOnStart>
        <applyCellChanges>true</applyCellChanges>
        <estimateRepairability>true</estimateRepairability>
        <exportCellChanges>true</exportCellChanges>
        <exportCellChangesPath>dirty_dependencies_0.5/cellChanges.csv</exportCellChangesPath>
        <exportDirtyDB>true</exportDirtyDB>
        <exportDirtyDBPath>dirty_dependencies_0.5/</exportDirtyDBPath>
        <exportDirtyDBType>CSV</exportDirtyDBType>
        <useDeltaDBForChanges>true</useDeltaDBForChanges>
        <cloneTargetSchema>true</cloneTargetSchema>
        <cloneSuffix>_dirty</cloneSuffix>
        <avoidInteractions>true</avoidInteractions>
        <errorPercentages>
            <defaultPercentage>0.0</defaultPercentage>
            <vioGenQueries>
                <vioGenQuery id="fd2">
                    <comparison>(zip1 == zip2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="dc2">
                    <comparison>(state1 == state2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="fd3">
                    <comparison>(state1 == state2)</comparison>
                    <percentage>0.5</percentage>
                </vioGenQuery>
                <vioGenQuery id="fd3">
                    <comparison>(areacode1 == areacode2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="fd2">
                    <comparison>(city1 != city2)</comparison>
                    <percentage>0.5</percentage>
                </vioGenQuery>
                <vioGenQuery id="dc1">
                    <comparison>(state1 == state2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="fd5">
                    <comparison>(zip1 == zip2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="cfd2">
                    <comparison>(zip1 &lt; zip2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="fd5">
                    <comparison>(state1 != state2)</comparison>
                    <percentage>0.5</percentage>
                </vioGenQuery>
                <vioGenQuery id="cfd1">
                    <comparison>(areacode1 == areacode2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="cfd2">
                    <comparison>(state1 == state2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
                <vioGenQuery id="dc1">
                    <comparison>(childexemp1 != childexemp2)</comparison>
                    <percentage>0.5</percentage>
                </vioGenQuery>
                <vioGenQuery id="dc2">
                    <comparison>(singleexemp1 != singleexemp2)</comparison>
                    <percentage>0.5</percentage>
                </vioGenQuery>
                <vioGenQuery id="dc2">
                    <comparison>(maritalstatus1 == maritalstatus2)</comparison>
                    <percentage>0.5</percentage>
                </vioGenQuery>
                <vioGenQuery id="fd1">
                    <comparison>(phone1 == phone2)</comparison>
                    <percentage>0.5</percentage>
                </vioGenQuery>
                <vioGenQuery id="dc1">
                    <comparison>(haschild1 == haschild2)</comparison>
                    <percentage>0.5</percentage>
                </vioGenQuery>
                <vioGenQuery id="cfd1">
                    <comparison>(state1 != state2)</comparison>
                    <percentage>0.0</percentage>
                </vioGenQuery>
            </vioGenQueries>
        </errorPercentages>
        <dirtyStrategies>
            <defaultStrategy>
                <strategy>TypoRandom</strategy>
            </defaultStrategy>
        </dirtyStrategies>
    </configuration>
</task>

