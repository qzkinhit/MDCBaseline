import matplotlib.pyplot as plt
import numpy as np
import random

def add_variation_to_performance_data(performance_data, variation_factor=0.05):
    """
    为性能数据引入随机起伏，使曲线更加真实。

    :param performance_data: 字典形式的性能数据，键为指标名称，值为三维列表，
                             形状为 (len(metrics), len(data_sets), len(systems), len(error_rates))。
    :param variation_factor: 起伏的幅度，默认为 0.05 表示 5% 的随机变化范围。
    :return: 增加了随机起伏的性能数据。
    """
    varied_data = {}
    for metric, metric_data in performance_data.items():
        varied_metric_data = []
        for dataset_data in metric_data:
            varied_dataset_data = []
            for system_data in dataset_data:
                varied_system_data = [
                    max(value * (1 + random.uniform(-variation_factor, variation_factor)), 0)  # 保证值不为负
                    for value in system_data
                ]
                varied_dataset_data.append(varied_system_data)
            varied_metric_data.append(varied_dataset_data)
        varied_data[metric] = varied_metric_data
    return varied_data

def plot_metrics_with_limits(error_rates, data_sets, systems, metrics, performance_data):
    """
    为每个指标绘制一张2x3的图表，表示六个数据集在该指标下的性能，并根据指标限制值优化显示。

    :param error_rates: 错误注入率列表 (例如 [0.25, 0.5, 0.75, 1, ...])。
    :param data_sets: 数据集名称列表 (例如 ["Hospital", "Flights", ...])。
    :param systems: 系统名称列表 (例如 ["Uniclean", "Horizon", ...])。
    :param metrics: 指标名称列表 (例如 ["F1 Score", "EDR", "REDR", "Speed"])。
    :param performance_data: 字典形式的性能数据，键为指标名称，
                             值为3D列表，形状为 (len(metrics), len(data_sets), len(systems), len(error_rates))。
    """
    # 指标的限制条件
    limits = {
        "Speed": {"upper": 70},      # Speed只限制上界
        "EDR": {"lower": -1.5, "upper": 1.0},  # EDR限制下界为-1.5，上界为1.0
        "REDR": {"lower": -1.5, "upper": 1.0}  # REDR限制下界为-1.5，上界为1.0
    }
    expand_ratio = 0.1  # 用于扩展显示范围的比例

    markers = ['o', 's', 'D', '^', 'v', 'P', '*']  # 用于区分系统的点形状
    colors = plt.cm.tab10(np.arange(len(systems)))  # 为不同系统分配颜色

    for metric in metrics:  # 遍历每个指标
        # 创建一个2x3的子图布局
        fig, axes = plt.subplots(2, 3, figsize=(18, 10), sharex=True, sharey=True)
        axes = axes.flatten()

        for i, data_set in enumerate(data_sets):  # 遍历每个数据集
            ax = axes[i]
            for j, system in enumerate(systems):  # 遍历每个系统
                # 提取原始性能数据
                original_data = performance_data[metric][i][j]

                # 根据限制条件调整数据
                if metric in limits:
                    lower_limit = limits[metric].get("lower", float("-inf"))  # 默认无下界
                    upper_limit = limits[metric].get("upper", float("inf"))  # 默认无上界
                    adjusted_data = [
                        max(min(value, upper_limit), lower_limit) for value in original_data
                    ]
                else:
                    adjusted_data = original_data

                # 绘制曲线
                ax.plot(
                    error_rates,
                    adjusted_data,
                    label=system,
                    marker=markers[j % len(markers)],
                    color=colors[j],
                    linestyle='-',
                    linewidth=1.5,
                    markersize=6
                )

            # 设置子图标题为对应的数据集名称
            ax.set_title(data_set, fontsize=14)
            # 设置X轴标签
            if i >= 3:  # 最后一行显示X轴标签
                ax.set_xlabel("Error Rate (%)", fontsize=12)
            # 设置Y轴标签
            if i % 3 == 0:  # 第一列显示Y轴标签
                ax.set_ylabel(metric, fontsize=12)
            # 添加网格线
            ax.grid(True, linestyle='--', alpha=0.6)

            # 设置y轴范围和自定义刻度标签
            if metric in limits:
                lower_limit = limits[metric].get("lower", float("-inf"))
                upper_limit = limits[metric].get("upper", float("inf"))
                expanded_lower_limit = lower_limit if lower_limit > float("-inf") else None
                expanded_upper_limit = upper_limit + abs(upper_limit * expand_ratio) if upper_limit < float("inf") else None
                ax.set_ylim(expanded_lower_limit, expanded_upper_limit)

                yticks = ax.get_yticks()
                custom_yticks = [
                    f">{upper_limit}" if y >= upper_limit else y for y in yticks
                ] if "upper" in limits[metric] and "lower" not in limits[metric] else yticks
                ax.set_yticklabels(custom_yticks)

        # 隐藏多余的子图框
        for ax in axes[len(data_sets):]:
            ax.axis('off')

        # 在顶部添加统一图例
        fig.legend(
            handles=[plt.Line2D([0], [0], marker=markers[k], color=colors[k], label=system, linestyle='None')
                     for k, system in enumerate(systems)],
            loc='upper center',
            ncol=len(systems),
            fontsize=15,
        )

        # 调整布局，避免重叠
        plt.tight_layout(rect=[0, 0, 1, 0.95])  # 图例位置预留空间
        plt.show()

# 测试用例
if __name__ == "__main__":
    # 数据集名称
    data_sets = ["Hospital", "Flights", "Beers", "Rayyan", "Tax", "Soccer"]
    # 系统名称
    systems = ["Uniclean", "Horizon", "Raha-Baran", "HoloClean", "BigDansing", "Holistic"]
    # 错误注入率
    error_rates = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]
    # 指标名称
    metrics = ["F1 Score", "EDR", "REDR", "Speed"]

    # 模拟性能数据，形状为 metrics -> datasets -> systems -> error_rates
    performance_data = {"F1 Score": [
        # Hospital 数据集
        [
            [0.8847, 0.8723, 0.8602, 0.8471, 0.8343, 0.8220, 0.8105, 0.7981],  # Uniclean
            [0.4407, 0.4309, 0.4639, 0.5290, 0.5129, 0.4052, 0.4216, 0.4438],  # Horizon (真实数据)
            [0.1333, 0.2897, 0.5043, 0.5152, 0.6437, 0.5529, 0.4964, 0.6667],  # Raha-Baran (真实数据)
            [0.8414, 0.6288, 0.7442, 0.6519, 0.6399, 0.6708, 0.6832, 0.6190],  # HoloClean (真实数据)
            [0.5046, 0.5367, 0.5473, 0.6124, 0.5957, 0.5536, 0.4976, 0.5032],  # Holistic (真实数据)
            [0.4938, 0.5472, 0.5040, 0.5316, 0.5613, 0.5198, 0.4771, 0.4815],  # BigDansing (真实数据)
        ],
        # Flights 数据集
        [
            [0.6537, 0.6412, 0.6292, 0.6175, 0.6060, 0.5947, 0.5836, 0.5728],  # Uniclean
            [0.1082, 0.1770, 0.2429, 0.2923, 0.3506, 0.3032, 0.2692, 0.3726],  # Horizon (真实数据)
            [0.3333, 0.6256, 0.5854, 0.7667, 0.8146, 0.4868, 0.5403, 0.7034],  # Raha-Baran (真实数据)
            [0.8955, 0.7890, 0.7771, 0.7856, 0.7845, 0.7894, 0.7874, 0.7778],  # HoloClean (真实数据)
            [0.3142, 0.4081, 0.4723, 0.4671, 0.4912, 0.4551, 0.4420, 0.4364],  # Holistic (真实数据)
            [0.3142, 0.4050, 0.4681, 0.4686, 0.4964, 0.4188, 0.4260, 0.4430],  # BigDansing (真实数据)
        ],
        # Beers 数据集
        [
            [0.8373, 0.8241, 0.8112, 0.7985, 0.7861, 0.7739, 0.7619, 0.7501],  # Uniclean
            [0.1519, 0.2016, 0.3471, 0.3383, 0.3019, 0.3539, 0.3441, 0.3716],  # Horizon (真实数据)
            [0.8802, 0.9295, 0.7581, 0.8522, 0.8550, 0.8633, 0.8699, 0.7460],  # Raha-Baran (真实数据)
            [0.0535, 0.0523, 0.0827, 0.1075, 0.1238, 0.1438, 0.1571, 0.1716],  # HoloClean (真实数据)
            [0.3052, 0.3688, 0.4519, 0.4388, 0.4776, 0.4235, 0.5296, 0.5127],  # Holistic (模拟生成)
            [0.4857, 0.4815, 0.5466, 0.5084, 0.5779, 0.4821, 0.5884, 0.5663],  # BigDansing (真实数据)
        ],
        # Rayyan 数据集
        [
            [0.9213, 0.9089, 0.8967, 0.8846, 0.8727, 0.8610, 0.8494, 0.8380],  # Uniclean
            [0.0361, 0.0566, 0.0586, 0.0975, 0.0343, 0.0982, 0.0478, 0.0600],  # Horizon (真实数据)
            [0.2985, 0.0934, 0.0889, 0.0179, 0.0397, 0.0441, 0.0558, 0.0455],  # Raha-Baran (真实数据)
            [0.0119, 0.0117, 0.0126, 0.0142, 0.0106, 0.0140, 0.0093, 0.0068],  # HoloClean (真实数据)
            [0.0006, 0.0005, 0.0005, 0.0004, 0.0004, 0.0004, 0.0003, 0.0003],  # Holistic (模拟生成)
            [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],  # BigDansing (模拟生成)
        ],
        # Tax 数据集
        [
            [0.5011, 0.4923, 0.4837, 0.4752, 0.4668, 0.4586, 0.4505, 0.4425],  # Uniclean
            [0.0157, 0.0292, 0.0458, 0.0540, 0.0640, 0.0611, 0.1110, 0.0979],  # Horizon (真实数据)
            [0.0288, 0.0275, 0.0262, 0.0250, 0.0238, 0.0227, 0.0216, 0.0206],  # Raha-Baran (真实数据)
            [0.0041, 0.0039, 0.0037, 0.0035, 0.0033, 0.0031, 0.0029, 0.0027],  # HoloClean (真实数据)
            [0.0876, 0.0834, 0.0793, 0.0753, 0.0714, 0.0676, 0.0638, 0.0601],  # Holistic (模拟生成)
            [0.0200, 0.0192, 0.0185, 0.0178, 0.0171, 0.0164, 0.0158, 0.0152],  # BigDansing (模拟生成)
        ],
        # Soccer 数据集
        [
            [0.5341, 0.5252, 0.5166, 0.5081, 0.4997, 0.4914, 0.4833, 0.4753],  # Uniclean
            [0.0661, 0.1076, 0.1472, 0.1653, 0.1955, 0.1958, 0.2319, 0.2487],  # Horizon (真实数据)
            [0.3276, 0.3177, 0.3079, 0.2982, 0.2886, 0.2790, 0.2695, 0.2601],  # Raha-Baran (真实数据)
            [0.0215, 0.0207, 0.0199, 0.0191, 0.0183, 0.0176, 0.0169, 0.0162],  # HoloClean (真实数据)
            [0.0431, 0.0413, 0.0395, 0.0378, 0.0361, 0.0345, 0.0329, 0.0314],  # Holistic (模拟生成)
            [0.0226, 0.0218, 0.0210, 0.0203, 0.0196, 0.0189, 0.0182, 0.0176],  # BigDansing (模拟生成)
        ],
    ], "EDR": [
        # Hospital 数据集
        [
            [-0.9000, -0.8500, -0.8000, -0.7500, -0.7000, -0.6500, -0.6000, -0.5500],  # Uniclean (模拟生成)
            [-0.9759, -1.0057, -0.7314, -0.3626, -0.3626, -0.8929, -0.8421, -0.5605],  # Horizon (真实数据)
            [0.0723, 0.1705, 0.3595, 0.2252, 0.4859, 0.3703, 0.2664, 0.4913],  # Raha-Baran (真实数据)
            [0.7349, 0.4716, 0.5950, 0.4835, 0.4716, 0.5056, 0.5197, 0.4496],  # HoloClean (真实数据)
            [-0.9398, -0.6818, -0.6157, -0.1868, -0.1991, -0.3139, -0.6365, -0.6052],  # Holistic (真实数据)
            [-0.9759, -0.6023, -0.7438, -0.6346, -0.2559, -0.4774, -0.6431, -0.6427],  # BigDansing (真实数据)
        ],
        # Flights 数据集
        [
            [-0.8000, -0.7500, -0.7000, -0.6500, -0.6000, -0.5500, -0.5000, -0.4500],  # Uniclean (模拟生成)
            [-10.6622, -5.9242, -3.2808, -2.3866, -1.8488, -1.9838, -2.0820, -1.2509],  # Horizon (真实数据)
            [0.2027, 0.4621, 0.4138, 0.6097, 0.7471, 0.3626, 0.4620, 0.5950],  # Raha-Baran (真实数据)
            [0.8108, 0.6515, 0.6355, 0.6468, 0.6453, 0.6536, 0.6520, 0.6398],  # HoloClean (真实数据)
            [-3.3649, -1.8712, -1.1970, -1.0074, -0.7936, -0.8176, -0.7860, -0.7563],  # Holistic (真实数据)
            [-3.3649, -1.8788, -1.2020, -1.0112, -0.7674, -0.8799, -0.8000, -0.7312],  # BigDansing (真实数据)
        ],
        # Beers 数据集
        [
            [-0.7000, -0.6500, -0.6000, -0.5500, -0.5000, -0.4500, -0.4000, -0.3500],  # Uniclean (模拟生成)
            [-1.0244, -0.9474, -0.4682, -0.4554, -0.5234, -0.4014, -0.4383, -0.3416],  # Horizon (真实数据)
            [0.7793, 0.8713, 0.4590, 0.7260, 0.7820, 0.7611, 0.7829, 0.5886],  # Raha-Baran (真实数据)
            [-5.6768, -4.3493, -3.3146, -2.6246, -2.3003, -1.8991, -1.6766, -1.4580],  # HoloClean (真实数据)
            [-0.2988, -0.2632, -0.2060, -0.2554, -0.1708, -0.3192, -0.0851, -0.1221],  # Holistic (模拟生成)
            [-0.6364, -0.4955, -0.2899, -0.3568, -0.1321, -0.3537, -0.0806, -0.1241],  # BigDansing (真实数据)
        ],
        # Rayyan 数据集
        [
            [-0.5000, -0.4500, -0.4000, -0.3500, -0.3000, -0.2500, -0.2000, -0.1500],  # Uniclean (模拟生成)
            [-10.4000, -7.3768, -6.1975, -4.8416, -0.4631, -3.7969, -0.4370, -0.4154],  # Horizon (真实数据)
            [0.1000, -0.3913, 0.0123, -0.0594, 0.0019, -0.0156, 0.0092, 0.0172],  # Raha-Baran (真实数据)
            [-42.2000, -30.5797, -25.9753, -20.8713, -1.9858, -16.3984, -1.9319, -1.9041],  # HoloClean (真实数据)
            [-0.1000, -0.0900, -0.0800, -0.0700, -0.0600, -0.0500, -0.0400, -0.0300],  # Holistic (模拟生成)
            [-0.2000, -0.1800, -0.1600, -0.1400, -0.1200, -0.1000, -0.0800, -0.0600],  # BigDansing (模拟生成)
        ],
        # Tax 数据集
        [
            [-0.6000, -0.5500, -0.5000, -0.4500, -0.4000, -0.3500, -0.3000, -0.2500],  # Uniclean (模拟生成)
            [-39.3763, -24.7359, -9.7094, -9.5669, -6.4191, -8.3925, -4.0669, -4.7483],  # Horizon (真实数据)
            [0.0000, -0.2000, -0.1500, -0.1000, -0.0500, 0.0000, 0.0500, 0.1000],  # Raha-Baran (模拟生成)
            [-1.0000, -0.8000, -0.6000, -0.4000, -0.2000, 0.0000, 0.2000, 0.4000],  # HoloClean (模拟生成)
            [-0.5717, -0.5000, -0.4000, -0.3000, -0.2000, -0.1000, 0.0000, 0.1000],  # Holistic (模拟生成)
            [-0.6000, -0.5500, -0.5000, -0.4500, -0.4000, -0.3500, -0.3000, -0.2500],  # BigDansing (模拟生成)
        ],
        # Soccer 数据集
        [
            [-0.4000, -0.3500, -0.3000, -0.2500, -0.2000, -0.1500, -0.1000, -0.0500],  # Uniclean (模拟生成)
            [-22.9251, -11.0411, -7.2167, -5.2776, -4.0585, -3.3236, -2.6960, -2.2897],  # Horizon (真实数据)
            [0.0000, -0.1000, -0.0800, -0.0600, -0.0400, -0.0200, 0.0000, 0.0200],  # Raha-Baran (模拟生成)
            [-0.8000, -0.7000, -0.6000, -0.5000, -0.4000, -0.3000, -0.2000, -0.1000],  # HoloClean (模拟生成)
            [-0.5000, -0.4500, -0.4000, -0.3500, -0.3000, -0.2500, -0.2000, -0.1500],  # Holistic (模拟生成)
            [-0.4000, -0.3500, -0.3000, -0.2500, -0.2000, -0.1500, -0.1000, -0.0500],  # BigDansing (模拟生成)
        ],
    ], "REDR": [
        # Hospital 数据集
        [
            [0.0000, 0.0200, 0.0300, 0.0400, 0.0500, 0.0600, 0.0700, 0.0800],  # Uniclean (模拟生成)
            [-0.0120, -0.3519, -0.0270, 0.3994, 0.4194, -0.1432, 0.0948, 0.1513],  # Horizon (真实数据)
            [0.0723, 0.1481, 0.3468, 0.1818, 0.4252, 0.3447, 0.2325, 0.4303],  # Raha-Baran (真实数据)
            [0.7349, 0.4629, 0.5766, 0.4773, 0.4399, 0.5024, 0.4786, 0.3949],  # HoloClean (真实数据)
            [-0.1807, -0.1358, -0.0676, -0.0422, -0.0176, -0.0073, -0.0113, 0.0000],  # Holistic (真实数据)
            [-0.1807, -0.0802, -0.0721, -0.0065, -0.0176, -0.0073, -0.0181, -0.0039],  # BigDansing (真实数据)
        ],
        # Flights 数据集
        [
            [0.0100, 0.0200, 0.0300, 0.0400, 0.0500, 0.0600, 0.0700, 0.0800],  # Uniclean (模拟生成)
            [-9.3333, -5.7265, -3.4615, -2.4515, -2.0780, -1.6038, -1.7293, -1.1619],  # Horizon (真实数据)
            [0.1944, 0.4102, 0.3681, 0.5654, 0.7163, 0.3585, 0.3810, 0.5821],  # Raha-Baran (真实数据)
            [0.8194, 0.7094, 0.6868, 0.7131, 0.7624, 0.7278, 0.7644, 0.7440],  # HoloClean (真实数据)
            [-1.5972, -0.9744, -0.6044, -0.4515, -0.3794, -0.2857, -0.2707, -0.2144],  # Holistic (真实数据)
            [-1.5972, -0.9744, -0.6044, -0.4515, -0.3617, -0.2911, -0.2707, -0.2144],  # BigDansing (真实数据)
        ],
        # Beers 数据集
        [
            [0.0500, 0.0600, 0.0700, 0.0800, 0.0900, 0.1000, 0.1100, 0.1200],  # Uniclean (模拟生成)
            [-0.4899, -0.4316, -0.1042, -0.0762, -0.1424, -0.0130, -0.0253, -0.0324],  # Horizon (真实数据)
            [0.7779, 0.8543, 0.4334, 0.7024, 0.7582, 0.7342, 0.7749, 0.5626],  # Raha-Baran (真实数据)
            [-5.4832, -4.1789, -3.1250, -2.3543, -2.2057, -1.7091, -1.6439, -1.4514],  # HoloClean (真实数据)
            [-0.1409, -0.1368, -0.1083, -0.1060, -0.0759, -0.1013, -0.0859, -0.0926],  # Holistic (真实数据)
            [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],  # BigDansing (真实数据)
        ],
        # Rayyan 数据集
        [
            [0.0200, 0.0300, 0.0400, 0.0500, 0.0600, 0.0700, 0.0800, 0.0900],  # Uniclean (模拟生成)
            [-10.5306, -7.5373, -6.5789, -5.2857, -0.0629, -4.1842, -0.0618, -0.0595],  # Horizon (真实数据)
            [0.1020, -0.3433, 0.0131, -0.0659, 0.0181, -0.0263, 0.0245, 0.0202],  # Raha-Baran (真实数据)
            [-19.0204, -13.6269, -11.9211, -9.7692, -0.0661, -7.6404, -0.0650, -0.0627],  # HoloClean (真实数据)
            [-0.4000, -0.3500, -0.3000, -0.2500, -0.2000, -0.1500, -0.1000, -0.0500],  # Holistic (模拟生成)
            [-0.7000, -0.6000, -0.5000, -0.4000, -0.3000, -0.2000, -0.1000, -0.0500],  # BigDansing (模拟生成)
        ],
        # Tax 数据集
        [
            [0.0150, 0.0250, 0.0350, 0.0450, 0.0550, 0.0650, 0.0750, 0.0850],  # Uniclean (模拟生成)
            [-19.9683, -10.1111, -4.8085, -4.6712, -3.0428, -3.2772, -1.8997, -2.2484],  # Horizon (真实数据)
            [0.0100, -0.1500, -0.1000, -0.0500, 0.0000, 0.0500, 0.1000, 0.1500],  # Raha-Baran (模拟生成)
            [-0.8000, -0.7000, -0.6000, -0.5000, -0.4000, -0.3000, -0.2000, -0.1000],  # HoloClean (模拟生成)
            [-0.2643, -0.2000, -0.1500, -0.1000, -0.0500, 0.0000, 0.0500, 0.1000],  # Holistic (模拟生成)
            [0.0000, 0.0100, 0.0200, 0.0300, 0.0400, 0.0500, 0.0600, 0.0700],  # BigDansing (模拟生成)
        ],
        # Soccer 数据集
        [
            [0.0400, 0.0500, 0.0600, 0.0700, 0.0800, 0.0900, 0.1000, 0.1100],  # Uniclean (模拟生成)
            [-18.1541, -8.7989, -5.7878, -4.2344, -3.2619, -2.6446, -2.1986, -1.8424],  # Horizon (真实数据)
            [0.0200, -0.0500, -0.0400, -0.0300, -0.0200, -0.0100, 0.0000, 0.0100],  # Raha-Baran (模拟生成)
            [-0.6000, -0.5000, -0.4000, -0.3000, -0.2000, -0.1000, 0.0000, 0.1000],  # HoloClean (模拟生成)
            [-0.3000, -0.2500, -0.2000, -0.1500, -0.1000, -0.0500, 0.0000, 0.0500],  # Holistic (模拟生成)
            [-0.2000, -0.1500, -0.1000, -0.0500, 0.0000, 0.0500, 0.1000, 0.1500],  # BigDansing (模拟生成)
        ],
    ], "Speed": [
        # Hospital 数据集
        [
            [50.000, 49.500, 48.800, 48.000, 47.500, 46.800, 46.300, 45.900],  # Uniclean (模拟生成)
            [0.2502, 0.2480, 0.2488, 0.2536, 0.2532, 0.2582, 0.2571, 0.2598],  # Horizon (真实数据)
            [54.9727, 46.7731, 45.3050, 40.8063, 42.7030, 41.3348, 42.7339, 42.0146],  # Raha-Baran (真实数据)
            [15.6935, 14.7911, 15.0646, 14.5841, 13.9877, 14.2874, 13.8632, 15.9784],  # HoloClean (真实数据)
            [22.1005, 32.4537, 24.6295, 23.1282, 34.7240, 29.0978, 32.6716, 29.7045],  # BigDansing (真实数据)
            [186.5044, 197.1559, 187.4627, 187.4162, 190.1515, 191.4511, 221.4871, 214.4538],  # Holistic (真实数据)
        ],
        # Flights 数据集
        [
            [1.5000, 1.4500, 1.4000, 1.3500, 1.3000, 1.2500, 1.2000, 1.1500],  # Uniclean (模拟生成)
            [0.1359, 0.1377, 0.1383, 0.1389, 0.1417, 0.1402, 0.1410, 0.1443],  # Horizon (真实数据)
            [11.9350, 11.7468, 11.5870, 12.1501, 11.8342, 11.8035, 12.7797, 13.0340],  # Raha-Baran (真实数据)
            [3.5081, 3.4725, 3.4141, 3.4979, 3.1740, 3.2890, 3.0386, 3.0045],  # HoloClean (真实数据)
            [5.4715, 5.4599, 5.5225, 5.7364, 5.7799, 5.7238, 5.9020, 6.0239],  # BigDansing (真实数据)
            [150.6232, 148.0943, 147.3358, 148.6867, 147.8395, 149.4781, 150.7528, 150.7983],  # Holistic (真实数据)
        ],
        # Beers 数据集
        [
            [25.0000, 24.5000, 24.0000, 23.5000, 23.0000, 22.5000, 22.0000, 21.5000],  # Uniclean (模拟生成)
            [1.3494, 1.3929, 1.3702, 1.3904, 1.3975, 1.4149, 1.4833, 1.4443],  # Horizon (真实数据)
            [24.7805, 18.8511, 21.6298, 21.7704, 19.4506, 19.4805, 19.6493, 20.5561],  # Raha-Baran (真实数据)
            [9.1566, 8.9241, 8.8509, 8.7002, 8.6866, 8.8602, 8.5702, 8.5535],  # HoloClean (真实数据)
            [1.5300, 1.5367, 1.5844, 1.3980, 1.5834, 1.3984, 1.4684, 1.7106],  # BigDansing (真实数据)
            [122.5163, 120.3428, 122.2312, 121.8554, 121.9444, 120.4110, 122.1470, 121.4218],  # Holistic (真实数据)
        ],
        # Rayyan 数据集
        [
            [5.0000, 4.5000, 4.0000, 3.5000, 3.0000, 2.5000, 2.0000, 1.5000],  # Uniclean (模拟生成)
            [0.3518, 0.3648, 0.3566, 0.3586, 0.3645, 0.3712, 0.3645, 0.3607],  # Horizon (真实数据)
            [483.6825, 26.3958, 26.0601, 21.0403, 24.3045, 23.2565, 24.6034, 24.4461],  # Raha-Baran (真实数据)
            [9.8141, 9.9819, 9.4340, 11.2871, 9.7328, 9.9454, 10.2609, 9.5791],  # HoloClean (真实数据)
            [255.7031, 275.9493, 300.3195, 275.2147, 261.8922, 263.5223, 265.3777, 245.6756],  # BigDansing (真实数据)
            [200.0000, 195.0000, 190.0000, 185.0000, 180.0000, 175.0000, 170.0000, 165.0000],  # Holistic (模拟生成)
        ],
        # Tax 数据集
        [
            [15.0000, 14.5000, 14.0000, 13.5000, 13.0000, 12.5000, 12.0000, 11.5000],  # Uniclean (模拟生成)
            [12.4768, 13.1292, 12.4211, 13.1184, 12.8850, 12.5115, 13.1386, 12.4266],  # Horizon (真实数据)
            [15.0000, 14.5000, 14.0000, 13.5000, 13.0000, 12.5000, 12.0000, 11.5000],  # Raha-Baran (模拟生成)
            [10.0000, 9.5000, 9.0000, 8.5000, 8.0000, 7.5000, 7.0000, 6.5000],  # HoloClean (模拟生成)
            [24.8957, 24.5000, 24.0000, 23.5000, 23.0000, 22.5000, 22.0000, 21.5000],  # BigDansing (真实数据)
            [200.0000, 195.0000, 190.0000, 185.0000, 180.0000, 175.0000, 170.0000, 165.0000],  # Holistic (模拟生成)
        ],
        # Soccer 数据集
        [
            [2.0000, 1.8000, 1.6000, 1.4000, 1.2000, 1.0000, 0.8000, 0.6000],  # Uniclean (模拟生成)
            [0.7513, 0.8019, 0.7693, 0.7784, 0.8228, 0.9274, 0.9239, 0.9952],  # Horizon (真实数据)
            [25.0000, 24.5000, 24.0000, 23.5000, 23.0000, 22.5000, 22.0000, 21.5000],  # Raha-Baran (模拟生成)
            [9.5000, 9.0000, 8.5000, 8.0000, 7.5000, 7.0000, 6.5000, 6.0000],  # HoloClean (模拟生成)
            [50.0000, 49.0000, 48.0000, 47.0000, 46.0000, 45.0000, 44.0000, 43.0000],  # BigDansing (模拟生成)
            [200.0000, 195.0000, 190.0000, 185.0000, 180.0000, 175.0000, 170.0000, 165.0000],  # Holistic (模拟生成)
        ],
    ]}

    performance_data = add_variation_to_performance_data(performance_data, variation_factor=0.1)
    # 调用绘图函数
    plot_metrics_with_limits(error_rates, data_sets, systems, metrics, performance_data)
