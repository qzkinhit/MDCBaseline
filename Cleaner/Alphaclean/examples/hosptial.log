/Users/qianzekai/anaconda3/bin/python /Users/qianzekai/PycharmProjects/dataclean/examples/hospitaltest.py
logs\20240820-220639_H162U69C5Q.log
Computing Block=acute care hospitals 1 out of 7
0.000363
Computing Block=aqcute care hospitals 2 out of 7
0.000128
Computing Block=acue care hospitals 3 out of 7
0.000121
Computing Block=acute car ehospitals 4 out of 7
0.000119
Computing Block=acute care hospitales 5 out of 7
0.000115
Computing Block=acute care hospidtals 6 out of 7
0.000114
Computing Block=acutee care hospitals 7 out of 7
0.000113
Computing Block=es 1 out of 5
0.000135
Computing Block=yes 2 out of 5
0.000331
Computing Block=mno 3 out of 5
0.000131
Computing Block=no 4 out of 5
0.000168
Computing Block=yse 5 out of 5
0.000134
Computing Block=ayl 1 out of 4
0.00012
Computing Block=fal 2 out of 4
0.000115
Computing Block=al 3 out of 4
0.000333
Computing Block=ak 4 out of 4
0.000142
Computing Block=children s asthma care 1 out of 12
0.000123
Computing Block=heart attack*** 2 out of 12
0.000119
Computing Block=penumonia 3 out of 12
0.000121
Computing Block=heart tatack 4 out of 12
0.000121
Computing Block=hearbt attack 5 out of 12
0.000115
Computing Block=heart atjtack 6 out of 12
0.000118
Computing Block=pneumonia 7 out of 12
0.000254
Computing Block=sugical infection prevention 8 out of 12
0.000151
Computing Block=surgical infection prevenion 9 out of 12
0.000121
Computing Block=heart failure 10 out of 12
0.000172
Computing Block=surgical infection prevention 11 out of 12
0.000238
Computing Block=heart attack 12 out of 12
0.000242
Computing Block=government - hospital district or authority 1 out of 14
0.000208
Computing Block=government - federal 2 out of 14
0.000143
Computing Block=government - hospitla district or authority 3 out of 14
0.000123
Computing Block=government - local 4 out of 14
0.000125
Computing Block=government - hospital district or autority 5 out of 14
0.000118
Computing Block=voluntary non-profit - other 6 out of 14
0.000275
Computing Block=voluntary non-prfoit - other 7 out of 14
0.000136
Computing Block=proprietary 8 out of 14
0.000235
Computing Block=government t- local 9 out of 14
0.000127
Computing Block=voluntary non-profit - privarte 10 out of 14
0.00012
Computing Block=voluntary non-profit - private 11 out of 14
0.000221
Computing Block=voluntary non-profit - church 12 out of 14
0.000162
Computing Block=government - state 13 out of 14
0.000158
Computing Block=voluntary non-profit- private 14 out of 14
0.000135
Computing Block=eliza coffee memorial hospital 1 out of 45
0.000193
Computing Block=shelby baptist medical center 2 out of 45
0.00018
Computing Block=medical center enterprise 3 out of 45
0.000169
Computing Block=marion regional medical center 4 out of 45
0.000186
Computing Block=univ of south alabama medical center 5 out of 45
0.000176
Computing Block=southeast alabama medical center 6 out of 45
0.000183
Computing Block=dekalb regional medical center 7 out of 45
0.000166
Computing Block=wedowee hospital 8 out of 45
0.000171
Computing Block=marshall medical center south 9 out of 45
0.000181
Computing Block=st vincents blount 10 out of 45
0.000173
Computing Block=yukon kuskokwim delta reg hospital 11 out of 45
0.000157
Computing Block=university of alabama hospital 12 out of 45
0.000191
Computing Block=crenshaw community hospital 13 out of 45
0.000178
Computing Block=helen keller memorial hospital 14 out of 45
0.000223
Computing Block=decatur general hospital 15 out of 45
0.000176
Computing Block=hartselle medical center 16 out of 45
Pruned:  df = swap(df,'ProviderNumber','10009',('ProviderNumber', {'10018'}))
Pruned:  df = swap(df,'ProviderNumber','10009',('ProviderNumber', {'01009'}))
Pruned:  df = swap(df,'ProviderNumber','10018',('ProviderNumber', {'10009'}))
Pruned:  df = swap(df,'ProviderNumber','01009',('ProviderNumber', {'10009'}))
0.000183
Computing Block=chilton medical center 17 out of 45
0.000192
Computing Block=georgiana hospital 18 out of 45
0.000188
Computing Block=cullman regional medical center 19 out of 45
0.000189
Computing Block=cherokee medical center 20 out of 45
0.000182
Computing Block=riverview regional medical center 21 out of 45
0.000188
Computing Block=northwest medical center 22 out of 45
0.000172
Computing Block=southwest alabama medical center 23 out of 45
0.000173
Computing Block=marshall medical center north 24 out of 45
0.00018
Computing Block=alaska regional hospital 25 out of 45
0.00017
Computing Block=flowers hospital 26 out of 45
0.00017
Computing Block=coosa valley medical center 27 out of 45
0.000208
Computing Block=jackson hospital & clinic inc 28 out of 45
0.000181
Computing Block=gadsden regional medical center 29 out of 45
0.000193
Computing Block=community hospital inc 30 out of 45
0.000209
Computing Block=st vincents hospital 31 out of 45
0.000157
Computing Block=elba general hospital 32 out of 45
0.000333
Computing Block=andalusia regional hospital 33 out of 45
0.000208
Computing Block=g h lanier memorial hospital 34 out of 45
0.000179
Computing Block=russellville hospital 35 out of 45
0.000148
Computing Block=baptist medical center south 36 out of 45
0.000187
Computing Block=callahan eye foundation hospital 37 out of 45
0.000168
Computing Block=st vincents east 38 out of 45
0.000162
Computing Block=prattville baptist hospital 39 out of 45
0.000167
Computing Block=huntsville hospital 40 out of 45
0.000159
Computing Block=fayette medical center 41 out of 45
0.000185
Computing Block=mizell memorial hospital 42 out of 45
0.00017
Computing Block=dale medical center 43 out of 45
0.00017
Computing Block=stringfellow memorial hospital 44 out of 45
0.000159
Computing Block=east alabama medical center and snf 45 out of 45
0.000176
Computing Block=children s asthma care 1 out of 12
0.000145
Computing Block=heart attack*** 2 out of 12
0.000131
Computing Block=penumonia 3 out of 12
0.000128
Computing Block=heart tatack 4 out of 12
0.000127
Computing Block=hearbt attack 5 out of 12
0.00012
Computing Block=heart atjtack 6 out of 12
0.000119
Computing Block=pneumonia 7 out of 12
0.000231
Computing Block=sugical infection prevention 8 out of 12
0.00014
Computing Block=surgical infection prevenion 9 out of 12
0.000141
Computing Block=heart failure 10 out of 12
0.000216
Computing Block=surgical infection prevention 11 out of 12
Pruned:  df = swap(df,'Condition','surgical infection prevention',('HospitalType', {'acute car ehospitals'}))
Pruned:  df = swap(df,'Condition','surgical infection prevention',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'Condition','surgical infection prevention',('MeasureName', {'all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery'}))
Pruned:  df = swap(df,'MeasureName','surgery patients whose preventive antibiotics were stopped at the right time (within 24 hours after surgery)',('HospitalType', {'acute car ehospitals'}))
Pruned:  df = swap(df,'MeasureName','patients who got treatment  at the right time (within 24 hours before or after their surgery) to help prevent blood clots after certain types of surgery',('HospitalType', {'acute car ehospitals'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given the  right kind  of antibiotic to help prevent infection',('HospitalType', {'acute car ehospitals'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given an antibiotic at the right time (within one hour before surgery) to help prevent infection',('HospitalType', {'acute car ehospitals'}))
Pruned:  df = swap(df,'MeasureName','surgery patients whose doctors ordered treatments to prevent blood clots after certain types of surgeries',('HospitalType', {'acute car ehospitals'}))
Pruned:  df = swap(df,'MeasureName','surgery patients needing hair removed from the surgical area before surgery who had hair removed using a safer method (electric clippers or hair removal cream c not a razor)',('HospitalType', {'acute car ehospitals'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were taking heart drugs called beta blockers before coming to the hospital who were kept on the beta blockers during the period just before and after their surgery',('HospitalType', {'acute car ehospitals'}))
Pruned:  df = swap(df,'MeasureName','all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery',('HospitalType', {'acute car ehospitals'}))
Pruned:  df = swap(df,'MeasureName','surgery patients whose preventive antibiotics were stopped at the right time (within 24 hours after surgery)',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','patients who got treatment  at the right time (within 24 hours before or after their surgery) to help prevent blood clots after certain types of surgery',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given the  right kind  of antibiotic to help prevent infection',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given an antibiotic at the right time (within one hour before surgery) to help prevent infection',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','surgery patients whose doctors ordered treatments to prevent blood clots after certain types of surgeries',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','surgery patients needing hair removed from the surgical area before surgery who had hair removed using a safer method (electric clippers or hair removal cream c not a razor)',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were taking heart drugs called beta blockers before coming to the hospital who were kept on the beta blockers during the period just before and after their surgery',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','surgery patients whose preventive antibiotics were stopped at the right time (within 24 hours after surgery)',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'MeasureName','patients who got treatment  at the right time (within 24 hours before or after their surgery) to help prevent blood clots after certain types of surgery',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given the  right kind  of antibiotic to help prevent infection',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given an antibiotic at the right time (within one hour before surgery) to help prevent infection',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'MeasureName','surgery patients whose doctors ordered treatments to prevent blood clots after certain types of surgeries',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'MeasureName','surgery patients needing hair removed from the surgical area before surgery who had hair removed using a safer method (electric clippers or hair removal cream c not a razor)',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were taking heart drugs called beta blockers before coming to the hospital who were kept on the beta blockers during the period just before and after their surgery',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'MeasureName','all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'MeasureName','surgery patients whose preventive antibiotics were stopped at the right time (within 24 hours after surgery)',('MeasureName', {'all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery'}))
Pruned:  df = swap(df,'MeasureName','patients who got treatment  at the right time (within 24 hours before or after their surgery) to help prevent blood clots after certain types of surgery',('MeasureName', {'all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given the  right kind  of antibiotic to help prevent infection',('MeasureName', {'all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given an antibiotic at the right time (within one hour before surgery) to help prevent infection',('MeasureName', {'all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery'}))
Pruned:  df = swap(df,'MeasureName','surgery patients whose doctors ordered treatments to prevent blood clots after certain types of surgeries',('MeasureName', {'all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery'}))
Pruned:  df = swap(df,'MeasureName','surgery patients needing hair removed from the surgical area before surgery who had hair removed using a safer method (electric clippers or hair removal cream c not a razor)',('MeasureName', {'all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were taking heart drugs called beta blockers before coming to the hospital who were kept on the beta blockers during the period just before and after their surgery',('MeasureName', {'all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery'}))
0.000236
Computing Block=heart attack 12 out of 12
Pruned:  df = swap(df,'Condition','heart attack',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'Condition','heart attack',('HospitalType', {'acue care hospitals'}))
Pruned:  df = swap(df,'Condition','heart attack',('HospitalType', {'acute care hospitales'}))
Pruned:  df = swap(df,'Condition','heart attack',('HospitalType', {'acute care hospidtals'}))
Pruned:  df = swap(df,'Condition','heart attack',('HospitalType', {'acutee care hospitals'}))
Pruned:  df = swap(df,'Condition','heart attack',('MeasureName', {'heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)'}))
Pruned:  df = swap(df,'Condition','heart attack',('MeasureName', {'heart attack patients given aspirin at arrival'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given sapirin at arrival',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given aspirin at discharge',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given aspirin at arrival',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given beta blocker at discharge',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','hear attack patients given aspirin at arrival',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given smoking cessation advice/counseling',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given pci within 90 minutes of arrival',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given fibrinolytic medication within 30 minutes of arrival',('HospitalType', {'acute care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given sapirin at arrival',('HospitalType', {'acue care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given aspirin at discharge',('HospitalType', {'acue care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given aspirin at arrival',('HospitalType', {'acue care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)',('HospitalType', {'acue care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given beta blocker at discharge',('HospitalType', {'acue care hospitals'}))
Pruned:  df = swap(df,'MeasureName','hear attack patients given aspirin at arrival',('HospitalType', {'acue care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given smoking cessation advice/counseling',('HospitalType', {'acue care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given pci within 90 minutes of arrival',('HospitalType', {'acue care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given fibrinolytic medication within 30 minutes of arrival',('HospitalType', {'acue care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given sapirin at arrival',('HospitalType', {'acute care hospitales'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given aspirin at discharge',('HospitalType', {'acute care hospitales'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given aspirin at arrival',('HospitalType', {'acute care hospitales'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)',('HospitalType', {'acute care hospitales'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given beta blocker at discharge',('HospitalType', {'acute care hospitales'}))
Pruned:  df = swap(df,'MeasureName','hear attack patients given aspirin at arrival',('HospitalType', {'acute care hospitales'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given smoking cessation advice/counseling',('HospitalType', {'acute care hospitales'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given pci within 90 minutes of arrival',('HospitalType', {'acute care hospitales'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given fibrinolytic medication within 30 minutes of arrival',('HospitalType', {'acute care hospitales'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given sapirin at arrival',('HospitalType', {'acute care hospidtals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given aspirin at discharge',('HospitalType', {'acute care hospidtals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given aspirin at arrival',('HospitalType', {'acute care hospidtals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)',('HospitalType', {'acute care hospidtals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given beta blocker at discharge',('HospitalType', {'acute care hospidtals'}))
Pruned:  df = swap(df,'MeasureName','hear attack patients given aspirin at arrival',('HospitalType', {'acute care hospidtals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given smoking cessation advice/counseling',('HospitalType', {'acute care hospidtals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given pci within 90 minutes of arrival',('HospitalType', {'acute care hospidtals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given fibrinolytic medication within 30 minutes of arrival',('HospitalType', {'acute care hospidtals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given sapirin at arrival',('HospitalType', {'acutee care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given aspirin at discharge',('HospitalType', {'acutee care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given aspirin at arrival',('HospitalType', {'acutee care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)',('HospitalType', {'acutee care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given beta blocker at discharge',('HospitalType', {'acutee care hospitals'}))
Pruned:  df = swap(df,'MeasureName','hear attack patients given aspirin at arrival',('HospitalType', {'acutee care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given smoking cessation advice/counseling',('HospitalType', {'acutee care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given pci within 90 minutes of arrival',('HospitalType', {'acutee care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given fibrinolytic medication within 30 minutes of arrival',('HospitalType', {'acutee care hospitals'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given sapirin at arrival',('Condition', {'heart attack'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given aspirin at discharge',('Condition', {'heart attack'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given aspirin at arrival',('Condition', {'heart attack'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)',('Condition', {'heart attack'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given beta blocker at discharge',('Condition', {'heart attack'}))
Pruned:  df = swap(df,'MeasureName','hear attack patients given aspirin at arrival',('Condition', {'heart attack'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given smoking cessation advice/counseling',('Condition', {'heart attack'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given pci within 90 minutes of arrival',('Condition', {'heart attack'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given fibrinolytic medication within 30 minutes of arrival',('Condition', {'heart attack'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given sapirin at arrival',('MeasureName', {'heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given aspirin at discharge',('MeasureName', {'heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given aspirin at arrival',('MeasureName', {'heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given beta blocker at discharge',('MeasureName', {'heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)'}))
Pruned:  df = swap(df,'MeasureName','hear attack patients given aspirin at arrival',('MeasureName', {'heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given smoking cessation advice/counseling',('MeasureName', {'heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given pci within 90 minutes of arrival',('MeasureName', {'heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given fibrinolytic medication within 30 minutes of arrival',('MeasureName', {'heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given sapirin at arrival',('MeasureName', {'heart attack patients given aspirin at arrival'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given aspirin at discharge',('MeasureName', {'heart attack patients given aspirin at arrival'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd)',('MeasureName', {'heart attack patients given aspirin at arrival'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given beta blocker at discharge',('MeasureName', {'heart attack patients given aspirin at arrival'}))
Pruned:  df = swap(df,'MeasureName','hear attack patients given aspirin at arrival',('MeasureName', {'heart attack patients given aspirin at arrival'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given smoking cessation advice/counseling',('MeasureName', {'heart attack patients given aspirin at arrival'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given pci within 90 minutes of arrival',('MeasureName', {'heart attack patients given aspirin at arrival'}))
Pruned:  df = swap(df,'MeasureName','heart attack patients given fibrinolytic medication within 30 minutes of arrival',('MeasureName', {'heart attack patients given aspirin at arrival'}))
0.000225
Computing Block=eliza coffee memorial hospital 1 out of 45
0.000189
Computing Block=shelby baptist medical center 2 out of 45
0.000174
Computing Block=medical center enterprise 3 out of 45
0.000183
Computing Block=marion regional medical center 4 out of 45
0.000164
Computing Block=univ of south alabama medical center 5 out of 45
0.000173
Computing Block=southeast alabama medical center 6 out of 45
0.00019
Computing Block=dekalb regional medical center 7 out of 45
0.000188
Computing Block=wedowee hospital 8 out of 45
0.000172
Computing Block=marshall medical center south 9 out of 45
0.000175
Computing Block=st vincents blount 10 out of 45
0.000181
Computing Block=yukon kuskokwim delta reg hospital 11 out of 45
0.000136
Computing Block=university of alabama hospital 12 out of 45
0.000174
Computing Block=crenshaw community hospital 13 out of 45
0.000175
Computing Block=helen keller memorial hospital 14 out of 45
0.00019
Computing Block=decatur general hospital 15 out of 45
0.000144
Computing Block=hartselle medical center 16 out of 45
0.00018
Computing Block=chilton medical center 17 out of 45
0.000171
Computing Block=georgiana hospital 18 out of 45
0.000189
Computing Block=cullman regional medical center 19 out of 45
0.000172
Computing Block=cherokee medical center 20 out of 45
0.000186
Computing Block=riverview regional medical center 21 out of 45
0.000187
Computing Block=northwest medical center 22 out of 45
0.000191
Computing Block=southwest alabama medical center 23 out of 45
Pruned:  df = swap(df,'HospitalOwner','government - federal',('HospitalName', {'southwest alabama medical center'}))
Pruned:  df = swap(df,'HospitalOwner','government - federal',('State', {'ayl'}))
Pruned:  df = swap(df,'HospitalOwner','government - federal',('State', {'al'}))
Pruned:  df = swap(df,'HospitalOwner','government - federal',('PhoneNumber', {'3346366221'}))
0.000179
Computing Block=marshall medical center north 24 out of 45
0.000181
Computing Block=alaska regional hospital 25 out of 45
0.000178
Computing Block=flowers hospital 26 out of 45
0.000173
Computing Block=coosa valley medical center 27 out of 45
0.00017
Computing Block=jackson hospital & clinic inc 28 out of 45
0.000185
Computing Block=gadsden regional medical center 29 out of 45
0.000175
Computing Block=community hospital inc 30 out of 45
0.000172
Computing Block=st vincents hospital 31 out of 45
0.000147
Computing Block=elba general hospital 32 out of 45
0.00018
Computing Block=andalusia regional hospital 33 out of 45
0.000173
Computing Block=g h lanier memorial hospital 34 out of 45
0.000183
Computing Block=russellville hospital 35 out of 45
0.00016
Computing Block=baptist medical center south 36 out of 45
0.000174
Computing Block=callahan eye foundation hospital 37 out of 45
0.000184
Computing Block=st vincents east 38 out of 45
0.000173
Computing Block=prattville baptist hospital 39 out of 45
0.000179
Computing Block=huntsville hospital 40 out of 45
0.000187
Computing Block=fayette medical center 41 out of 45
0.000171
Computing Block=mizell memorial hospital 42 out of 45
0.000215
Computing Block=dale medical center 43 out of 45
0.000184
Computing Block=stringfellow memorial hospital 44 out of 45
0.000183
Computing Block=east alabama medical center and snf 45 out of 45
0.000184
Computing Block=eliza coffee memorial hospital 1 out of 45
0.000167
Computing Block=shelby baptist medical center 2 out of 45
0.000183
Computing Block=medical center enterprise 3 out of 45
0.000168
Computing Block=marion regional medical center 4 out of 45
Pruned:  df = swap(df,'HospitalName','marion regional medical center',('ZipCode', {'35570'}))
Pruned:  df = swap(df,'HospitalName','marion regional medical center',('ZipCode', {'3550'}))
0.00019
Computing Block=univ of south alabama medical center 5 out of 45
0.000144
Computing Block=southeast alabama medical center 6 out of 45
0.000175
Computing Block=dekalb regional medical center 7 out of 45
0.00018
Computing Block=wedowee hospital 8 out of 45
0.000204
Computing Block=marshall medical center south 9 out of 45
0.000168
Computing Block=st vincents blount 10 out of 45
0.000164
Computing Block=yukon kuskokwim delta reg hospital 11 out of 45
0.000132
Computing Block=university of alabama hospital 12 out of 45
0.000176
Computing Block=crenshaw community hospital 13 out of 45
0.000184
Computing Block=helen keller memorial hospital 14 out of 45
0.000168
Computing Block=decatur general hospital 15 out of 45
0.000129
Computing Block=hartselle medical center 16 out of 45
0.000172
Computing Block=chilton medical center 17 out of 45
0.000163
Computing Block=georgiana hospital 18 out of 45
0.000159
Computing Block=cullman regional medical center 19 out of 45
0.00018
Computing Block=cherokee medical center 20 out of 45
0.000165
Computing Block=riverview regional medical center 21 out of 45
0.000171
Computing Block=northwest medical center 22 out of 45
0.000165
Computing Block=southwest alabama medical center 23 out of 45
0.000181
Computing Block=marshall medical center north 24 out of 45
0.000169
Computing Block=alaska regional hospital 25 out of 45
0.000175
Computing Block=flowers hospital 26 out of 45
0.000202
Computing Block=coosa valley medical center 27 out of 45
0.000165
Computing Block=jackson hospital & clinic inc 28 out of 45
0.000164
Computing Block=gadsden regional medical center 29 out of 45
0.000163
Computing Block=community hospital inc 30 out of 45
0.000168
Computing Block=st vincents hospital 31 out of 45
0.000133
Computing Block=elba general hospital 32 out of 45
0.000164
Computing Block=andalusia regional hospital 33 out of 45
0.000188
Computing Block=g h lanier memorial hospital 34 out of 45
0.000168
Computing Block=russellville hospital 35 out of 45
0.000131
Computing Block=baptist medical center south 36 out of 45
0.00017
Computing Block=callahan eye foundation hospital 37 out of 45
Pruned:  df = swap(df,'HospitalName','callahan eye foundation hospital',('ZipCode', {'5233'}))
Pruned:  df = swap(df,'HospitalName','callahan eye foundation hospital',('ZipCode', {'35233'}))
Pruned:  df = swap(df,'HospitalName','callahan eye foundation hospital',('ZipCode', {'35233***'}))
Pruned:  df = swap(df,'ZipCode','35233',('ZipCode', {'5233'}))
Pruned:  df = swap(df,'ZipCode','5233',('ZipCode', {'35233'}))
0.00018
Computing Block=st vincents east 38 out of 45
0.000168
Computing Block=prattville baptist hospital 39 out of 45
0.000169
Computing Block=huntsville hospital 40 out of 45
0.000162
Computing Block=fayette medical center 41 out of 45
0.000165
Computing Block=mizell memorial hospital 42 out of 45
0.000159
Computing Block=dale medical center 43 out of 45
0.000185
Computing Block=stringfellow memorial hospital 44 out of 45
0.000166
Computing Block=east alabama medical center and snf 45 out of 45
0.000163
Computing Block=eliza coffee memorial hospital 1 out of 45
0.000173
Computing Block=shelby baptist medical center 2 out of 45
0.000177
Computing Block=medical center enterprise 3 out of 45
0.00017
Computing Block=marion regional medical center 4 out of 45
0.000189
Computing Block=univ of south alabama medical center 5 out of 45
0.000171
Computing Block=southeast alabama medical center 6 out of 45
0.000173
Computing Block=dekalb regional medical center 7 out of 45
0.00017
Computing Block=wedowee hospital 8 out of 45
0.000182
Computing Block=marshall medical center south 9 out of 45
0.000199
Computing Block=st vincents blount 10 out of 45
0.000171
Computing Block=yukon kuskokwim delta reg hospital 11 out of 45
0.000131
Computing Block=university of alabama hospital 12 out of 45
0.000172
Computing Block=crenshaw community hospital 13 out of 45
0.000171
Computing Block=helen keller memorial hospital 14 out of 45
0.000167
Computing Block=decatur general hospital 15 out of 45
0.000148
Computing Block=hartselle medical center 16 out of 45
0.00019
Computing Block=chilton medical center 17 out of 45
Pruned:  df = swap(df,'PhoneNumber','2057555200',('PhoneNumber', {'2057552500'}))
Pruned:  df = swap(df,'PhoneNumber','2057552500',('PhoneNumber', {'2057555200'}))
0.000173
Computing Block=georgiana hospital 18 out of 45
0.000166
Computing Block=cullman regional medical center 19 out of 45
0.00017
Computing Block=cherokee medical center 20 out of 45
Pruned:  df = swap(df,'PhoneNumber','k2569275531',('PhoneNumber', {'2569275531'}))
Pruned:  df = swap(df,'PhoneNumber','2569275531',('PhoneNumber', {'k2569275531'}))
0.00018
Computing Block=riverview regional medical center 21 out of 45
0.000194
Computing Block=northwest medical center 22 out of 45
0.000195
Computing Block=southwest alabama medical center 23 out of 45
0.000166
Computing Block=marshall medical center north 24 out of 45
0.000189
Computing Block=alaska regional hospital 25 out of 45
0.000181
Computing Block=flowers hospital 26 out of 45
0.000178
Computing Block=coosa valley medical center 27 out of 45
0.000173
Computing Block=jackson hospital & clinic inc 28 out of 45
0.00018
Computing Block=gadsden regional medical center 29 out of 45
0.000173
Computing Block=community hospital inc 30 out of 45
0.000178
Computing Block=st vincents hospital 31 out of 45
0.000146
Computing Block=elba general hospital 32 out of 45
0.000173
Computing Block=andalusia regional hospital 33 out of 45
0.000171
Computing Block=g h lanier memorial hospital 34 out of 45
0.000174
Computing Block=russellville hospital 35 out of 45
0.000129
Computing Block=baptist medical center south 36 out of 45
0.000171
Computing Block=callahan eye foundation hospital 37 out of 45
0.000184
Computing Block=st vincents east 38 out of 45
0.000204
Computing Block=prattville baptist hospital 39 out of 45
0.000247
Computing Block=huntsville hospital 40 out of 45
0.000186
Computing Block=fayette medical center 41 out of 45
0.000189
Computing Block=mizell memorial hospital 42 out of 45
0.000173
Computing Block=dale medical center 43 out of 45
0.000192
Computing Block=stringfellow memorial hospital 44 out of 45
0.000175
Computing Block=east alabama medical center and snf 45 out of 45
0.000174
Computing Block=pneumonia patients given the most appropriate initial antibiotic(s) 1 out of 30
0.00018
Computing Block=surgery patients who were given an antibiotic at the right time (within one hour before surgery) to help prevent infection 2 out of 30
Pruned:  df = swap(df,'MeasureName','surgery patients who were given an antibiotic at the right time (within one hour before surgery) to help prevent infection',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given an antibiotic at the right time (within one hour before surgery) to help prevent infection',('MeasureCode', {'scip-inf-1'}))
0.000173
Computing Block=surgery patients whose doctors ordered treatments to prevent blood clots after certain types of surgeries 3 out of 30
0.000202
Computing Block=heart attack patients given sapirin at arrival 4 out of 30
0.000144
Computing Block=heart attack patients given aspirin at arrival 5 out of 30
0.000195
Computing Block=children who received reliever medication while hospitalized for asthma 6 out of 30
0.00014
Computing Block=pneumonia patients whose initial emergency room blood culture was performed prior to the administration of the first hospital dose of antibiotics 7 out of 30
0.000177
Computing Block=children and their caregivers who received a home management plan of care document while hospitalized for asthma 8 out of 30
0.000136
Computing Block=heart attack patients given pci within 90 minutes of arrival 9 out of 30
0.000189
Computing Block=heart failure patients given discharge instructions 10 out of 30
Pruned:  df = swap(df,'MeasureName','heart failure patients given discharge instructions',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureName','heart failure patients given discharge instructions',('MeasureCode', {'hf-1'}))
0.000183
Computing Block=heart attack patients given fibrinolytic medication within 30 minutes of arrival 11 out of 30
Pruned:  df = swap(df,'MeasureCode','ami-7a',('MeasureCode', {'am-7a'}))
Pruned:  df = swap(df,'MeasureCode','am-7a',('MeasureCode', {'ami-7a'}))
0.000187
Computing Block=pneumonia patients assessed and given pneumococcal vaccination 12 out of 30
0.000209
Computing Block=heart failure patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd) 13 out of 30
0.000182
Computing Block=surgery patients who were given the  right kind  of antibiotic to help prevent infection 14 out of 30
Pruned:  df = swap(df,'MeasureName','surgery patients who were given the  right kind  of antibiotic to help prevent infection',('MeasureCode', {'scip-inf-2'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given the  right kind  of antibiotic to help prevent infection',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-inf-2',('MeasureName', {'surgery patients who were given the  right kind  of antibiotic to help prevent infection'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('MeasureName', {'surgery patients who were given the  right kind  of antibiotic to help prevent infection'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('MeasureCode', {'scip-inf-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-inf-2',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given the  right kind  of antibiotic to help prevent infection',('MeasureCode', {'scip-inf-2'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given the  right kind  of antibiotic to help prevent infection',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-inf-2',('MeasureName', {'surgery patients who were given the  right kind  of antibiotic to help prevent infection'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('MeasureName', {'surgery patients who were given the  right kind  of antibiotic to help prevent infection'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('MeasureCode', {'scip-inf-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-inf-2',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given the  right kind  of antibiotic to help prevent infection',('MeasureCode', {'scip-inf-2'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given the  right kind  of antibiotic to help prevent infection',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-inf-2',('MeasureName', {'surgery patients who were given the  right kind  of antibiotic to help prevent infection'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('MeasureName', {'surgery patients who were given the  right kind  of antibiotic to help prevent infection'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('MeasureCode', {'scip-inf-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-inf-2',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given the  right kind  of antibiotic to help prevent infection',('MeasureCode', {'scip-inf-2'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given the  right kind  of antibiotic to help prevent infection',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-inf-2',('MeasureName', {'surgery patients who were given the  right kind  of antibiotic to help prevent infection'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('MeasureName', {'surgery patients who were given the  right kind  of antibiotic to help prevent infection'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('MeasureCode', {'scip-inf-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-inf-2',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given the  right kind  of antibiotic to help prevent infection',('MeasureCode', {'scip-inf-2'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were given the  right kind  of antibiotic to help prevent infection',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-inf-2',('MeasureName', {'surgery patients who were given the  right kind  of antibiotic to help prevent infection'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('MeasureName', {'surgery patients who were given the  right kind  of antibiotic to help prevent infection'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('MeasureCode', {'scip-inf-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-inf-2',('MeasureCode', {'scip-card-2'}))
0.000204
Computing Block=pneumonia patients assessed and given influenza vaccination 15 out of 30
0.000186
Computing Block=surgery patients who were taking heart drugs called beta blockers before coming to the hospital who were kept on the beta blockers during the period just before and after their surgery 16 out of 30
Pruned:  df = swap(df,'MeasureName','surgery patients who were taking heart drugs called beta blockers before coming to the hospital who were kept on the beta blockers during the period just before and after their surgery',('MeasureCode', {'hf-2'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were taking heart drugs called beta blockers before coming to the hospital who were kept on the beta blockers during the period just before and after their surgery',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureName','surgery patients who were taking heart drugs called beta blockers before coming to the hospital who were kept on the beta blockers during the period just before and after their surgery',('MeasureCode', {'hf-3'}))
Pruned:  df = swap(df,'MeasureCode','hf-3',('MeasureCode', {'hf-2'}))
Pruned:  df = swap(df,'MeasureCode','hf-2',('MeasureCode', {'hf-3'}))
0.000186
Computing Block=heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd) 17 out of 30
0.000188
Computing Block=pneumonia patients given smoking cessation advice/counseling 18 out of 30
Pruned:  df = swap(df,'MeasureName','pneumonia patients given smoking cessation advice/counseling',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureName','pneumonia patients given smoking cessation advice/counseling',('MeasureCode', {'pn-4'}))
0.000176
Computing Block=surgery patients whose preventive antibiotics were stopped at the right time (within 24 hours after surgery) 19 out of 30
0.000187
Computing Block=pneumonia patients given initial antibiotic(s) within 6 hours after arrival 20 out of 30
0.000193
Computing Block=surgery patients needing hair removed from the surgical area before surgery who had hair removed using a safer method (electric clippers or hair removal cream c not a razor) 21 out of 30
0.000185
Computing Block=heart attack patients given aspirin at discharge 22 out of 30
0.000182
Computing Block=heart attack patients given smoking cessation advice/counseling 23 out of 30
0.000209
Computing Block=heart failure patients given smoking cessation advice/counseling 24 out of 30
0.000189
Computing Block=all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery 25 out of 30
Pruned:  df = swap(df,'MeasureName','all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery',('MeasureCode', {'scip-nif-4'}))
Pruned:  df = swap(df,'MeasureName','all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery',('MeasureCode', {'scimp-inf-4'}))
Pruned:  df = swap(df,'MeasureName','all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery',('MeasureCode', {'scip-inf-4'}))
0.000189
Computing Block=patients who got treatment  at the right time (within 24 hours before or after their surgery) to help prevent blood clots after certain types of surgery 26 out of 30
0.000179
Computing Block=children who received systemic corticosteroid medication (oral and iv medication that reduces inflammation and controls symptoms) while hospitalized for asthma 27 out of 30
0.000144
Computing Block=heart failure patients given an evaluation of left ventricular systolic (lvs) function 28 out of 30
Pruned:  df = swap(df,'MeasureName','heart failure patients given an evaluation of left ventricular systolic (lvs) function',('MeasureCode', {'hf-2'}))
Pruned:  df = swap(df,'MeasureName','heart failure patients given an evaluation of left ventricular systolic (lvs) function',('MeasureCode', {'scip-card-2'}))
0.000186
Computing Block=heart attack patients given beta blocker at discharge 29 out of 30
0.00019
Computing Block=hear attack patients given aspirin at arrival 30 out of 30
0.000142
Computing Block=scip-vte-1 1 out of 28
0.000186
Computing Block=hf-3 2 out of 28
Pruned:  df = swap(df,'MeasureCode','hf-3',('Stateavg', {'al_hf-3'}))
Pruned:  df = swap(df,'MeasureCode','hf-3',('Stateavg', {'ak_hf-3'}))
0.000179
Computing Block=scip-vte-2 3 out of 28
Pruned:  df = swap(df,'MeasureCode','scip-vte-2',('Stateavg', {'ak_scip-vte-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-vte-2',('Stateavg', {'al_scip-vte-2'}))
0.000191
Computing Block=pn-4 4 out of 28
Pruned:  df = swap(df,'MeasureCode','pn-4',('Stateavg', {'al_pn-4'}))
Pruned:  df = swap(df,'MeasureCode','pn-4',('Stateavg', {'ak_pn-4'}))
0.000196
Computing Block=pn-2 5 out of 28
Pruned:  df = swap(df,'MeasureCode','pn-2',('Stateavg', {'al_pn-2'}))
Pruned:  df = swap(df,'MeasureCode','pn-2',('Stateavg', {'ak_pn-2'}))
0.000176
Computing Block=scip-inf-3 6 out of 28
Pruned:  df = swap(df,'MeasureCode','scip-inf-3',('Stateavg', {'ak_scip-inf-3'}))
Pruned:  df = swap(df,'MeasureCode','scip-inf-3',('Stateavg', {'al_scip-inf-3'}))
0.00018
Computing Block=pn-6 7 out of 28
Pruned:  df = swap(df,'MeasureCode','pn-6',('Stateavg', {'a_pn-6'}))
Pruned:  df = swap(df,'MeasureCode','pn-6',('Stateavg', {'ak_pn-6'}))
Pruned:  df = swap(df,'MeasureCode','pn-6',('Stateavg', {'al_pn-6'}))
0.000189
Computing Block=hf-1 8 out of 28
Pruned:  df = swap(df,'MeasureCode','hf-1',('Stateavg', {'ak_hf-1'}))
Pruned:  df = swap(df,'MeasureCode','hf-1',('Stateavg', {'al_hf-1'}))
0.000207
Computing Block=scip-inf-1 9 out of 28
Pruned:  df = swap(df,'MeasureCode','scip-inf-1',('Stateavg', {'al_scip-inf-1'}))
Pruned:  df = swap(df,'MeasureCode','scip-inf-1',('Stateavg', {'ak_scip-inf-1'}))
0.000183
Computing Block=scip-inf-4 10 out of 28
Pruned:  df = swap(df,'MeasureCode','scip-inf-4',('Stateavg', {'ak_scip-inf-4'}))
Pruned:  df = swap(df,'MeasureCode','scip-inf-4',('Stateavg', {'al_scip-inf-4'}))
0.000203
Computing Block=pn-5c 11 out of 28
Pruned:  df = swap(df,'MeasureCode','pn-5c',('Stateavg', {'al_pn-5c'}))
Pruned:  df = swap(df,'MeasureCode','pn-5c',('Stateavg', {'ak_pn-5c'}))
0.000186
Computing Block=cac-2 12 out of 28
0.000133
Computing Block=scip-card-2 13 out of 28
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('Stateavg', {'al_scip-card-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('Stateavg', {'ak_scip-card-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('Stateavg', {'al_hf-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('Stateavg', {'al_hf-3'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('Stateavg', {'al_scip-inf-2'}))
0.000186
Computing Block=cac-3 14 out of 28
0.000135
Computing Block=ami-1 15 out of 28
Pruned:  df = swap(df,'MeasureCode','ami-1',('Stateavg', {'al_ami-1'}))
Pruned:  df = swap(df,'MeasureCode','ami-1',('Stateavg', {'ak_ami-1'}))
0.000198
Computing Block=ami-8a 16 out of 28
0.000187
Computing Block=ami-4 17 out of 28
0.000175
Computing Block=scip-inf-2 18 out of 28
Pruned:  df = swap(df,'MeasureCode','scip-inf-2',('Stateavg', {'ak_scip-inf-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-inf-2',('Stateavg', {'al_scip-inf-2'}))
0.000182
Computing Block=ami-2 19 out of 28
Pruned:  df = swap(df,'MeasureCode','ami-2',('Stateavg', {'al_ambi-2'}))
Pruned:  df = swap(df,'MeasureCode','ami-2',('Stateavg', {'al_ami-2'}))
Pruned:  df = swap(df,'MeasureCode','ami-2',('Stateavg', {'ak_ami-2'}))
Pruned:  df = swap(df,'MeasureCode','ami-2',('Stateavg', {'afl_ami-2'}))
0.000188
Computing Block=pn-3b 20 out of 28
Pruned:  df = swap(df,'MeasureCode','pn-3b',('Stateavg', {'ak_pn-3b'}))
Pruned:  df = swap(df,'MeasureCode','pn-3b',('Stateavg', {'al_pn-3b'}))
0.000182
Computing Block=scip-inf-6 21 out of 28
Pruned:  df = swap(df,'MeasureCode','scip-inf-6',('Stateavg', {'al_scip-inf-6'}))
Pruned:  df = swap(df,'MeasureCode','scip-inf-6',('Stateavg', {'ak_scip-inf-6'}))
0.000179
Computing Block=hf-2 22 out of 28
Pruned:  df = swap(df,'MeasureCode','hf-2',('Stateavg', {'ak_hf-2'}))
Pruned:  df = swap(df,'MeasureCode','hf-2',('Stateavg', {'al_hf-2'}))
0.000182
Computing Block=ami-3 23 out of 28
0.000194
Computing Block=pn-7 24 out of 28
Pruned:  df = swap(df,'MeasureCode','pn-7',('Stateavg', {'ak_pn-7'}))
Pruned:  df = swap(df,'MeasureCode','pn-7',('Stateavg', {'al_pn-7'}))
0.000189
Computing Block=hf-4 25 out of 28
Pruned:  df = swap(df,'MeasureCode','hf-4',('Stateavg', {'ak_hf-4'}))
Pruned:  df = swap(df,'MeasureCode','hf-4',('Stateavg', {'al_hf-4'}))
0.000187
Computing Block=ami-7a 26 out of 28
0.000175
Computing Block=cac-1 27 out of 28
0.000135
Computing Block=ami-5 28 out of 28
0.000181
Computing Block=10011 1 out of 45
0.000174
Computing Block=10045 2 out of 45
0.00019
Computing Block=10035 3 out of 45
0.000199
Computing Block=10012 4 out of 45
0.000174
Computing Block=10044 5 out of 45
0.00018
Computing Block=10055 6 out of 45
0.000169
Computing Block=10085 7 out of 45
0.000132
Computing Block=10015 8 out of 45
0.000188
Computing Block=10056 9 out of 45
0.000138
Computing Block=10086 10 out of 45
0.000178
Computing Block=10025 11 out of 45
0.000177
Computing Block=10005 12 out of 45
0.000168
Computing Block=20018 13 out of 45
0.00013
Computing Block=10029 14 out of 45
0.000182
Computing Block=10022 15 out of 45
0.000184
Computing Block=10009 16 out of 45
0.000175
Computing Block=10023 17 out of 45
0.000192
Computing Block=10047 18 out of 45
0.000171
Computing Block=10001 19 out of 45
0.000191
Computing Block=20017 20 out of 45
0.000173
Computing Block=10164 21 out of 45
0.000169
Computing Block=10008 22 out of 45
0.000169
Computing Block=10007 23 out of 45
0.000171
Computing Block=10033 24 out of 45
0.000177
Computing Block=10040 25 out of 45
0.000184
Computing Block=10087 26 out of 45
0.00019
Computing Block=10034 27 out of 45
0.000178
Computing Block=10016 28 out of 45
0.000188
Computing Block=10032 29 out of 45
0.000183
Computing Block=10049 30 out of 45
0.000187
Computing Block=10038 31 out of 45
0.000184
Computing Block=10043 32 out of 45
0.000183
Computing Block=10046 33 out of 45
0.000175
Computing Block=10021 34 out of 45
0.000178
Computing Block=10050 35 out of 45
0.000192
Computing Block=10018 36 out of 45
0.000172
Computing Block=10010 37 out of 45
0.000182
Computing Block=10006 38 out of 45
0.000187
Computing Block=10036 39 out of 45
0.000189
Computing Block=10039 40 out of 45
0.000188
Computing Block=10019 41 out of 45
0.000169
Computing Block=10158 42 out of 45
0.000148
Computing Block=10027 43 out of 45
0.000175
Computing Block=10108 44 out of 45
0.000167
Computing Block=10024 45 out of 45
0.000211
Computing Block=scip-vte-1 1 out of 28
0.000174
Computing Block=hf-3 2 out of 28
0.000178
Computing Block=scip-vte-2 3 out of 28
0.000164
Computing Block=pn-4 4 out of 28
Pruned:  df = swap(df,'Condition','penumonia',('MeasureCode', {'pn-4'}))
Pruned:  df = swap(df,'Condition','pneumonia',('MeasureCode', {'pn-4'}))
Pruned:  df = swap(df,'MeasureCode','pn-4',('Condition', {'penumonia'}))
Pruned:  df = swap(df,'MeasureCode','pn-4',('Condition', {'pneumonia'}))
0.000186
Computing Block=pn-2 5 out of 28
0.000194
Computing Block=scip-inf-3 6 out of 28
0.000176
Computing Block=pn-6 7 out of 28
0.000177
Computing Block=hf-1 8 out of 28
0.000185
Computing Block=scip-inf-1 9 out of 28
0.000178
Computing Block=scip-inf-4 10 out of 28
0.000175
Computing Block=pn-5c 11 out of 28
0.000195
Computing Block=cac-2 12 out of 28
0.000137
Computing Block=scip-card-2 13 out of 28
Pruned:  df = swap(df,'Condition','surgical infection prevention',('Condition', {'heart failure'}))
Pruned:  df = swap(df,'Condition','heart failure',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'Condition','heart failure',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'Condition','surgical infection prevention',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('Condition', {'heart failure'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'Condition','surgical infection prevention',('Condition', {'heart failure'}))
Pruned:  df = swap(df,'Condition','heart failure',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'Condition','heart failure',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'Condition','surgical infection prevention',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('Condition', {'heart failure'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'Condition','surgical infection prevention',('Condition', {'heart failure'}))
Pruned:  df = swap(df,'Condition','heart failure',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'Condition','heart failure',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'Condition','surgical infection prevention',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('Condition', {'heart failure'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'Condition','surgical infection prevention',('Condition', {'heart failure'}))
Pruned:  df = swap(df,'Condition','heart failure',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'Condition','heart failure',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'Condition','surgical infection prevention',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('Condition', {'heart failure'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'Condition','surgical infection prevention',('Condition', {'heart failure'}))
Pruned:  df = swap(df,'Condition','heart failure',('Condition', {'surgical infection prevention'}))
Pruned:  df = swap(df,'Condition','heart failure',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'Condition','surgical infection prevention',('MeasureCode', {'scip-card-2'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('Condition', {'heart failure'}))
Pruned:  df = swap(df,'MeasureCode','scip-card-2',('Condition', {'surgical infection prevention'}))
0.000183
Computing Block=cac-3 14 out of 28
0.000134
Computing Block=ami-1 15 out of 28
Pruned:  df = swap(df,'MeasureCode','ami-1',('Condition', {'hearbt attack'}))
Pruned:  df = swap(df,'MeasureCode','ami-1',('Condition', {'heart attack'}))
0.000181
Computing Block=ami-8a 16 out of 28
0.000183
Computing Block=ami-4 17 out of 28
Pruned:  df = swap(df,'Condition','heart attack***',('MeasureCode', {'ami-4'}))
Pruned:  df = swap(df,'Condition','heart attack',('MeasureCode', {'ami-4'}))
Pruned:  df = swap(df,'MeasureCode','ami-4',('Condition', {'heart attack***'}))
Pruned:  df = swap(df,'MeasureCode','ami-4',('Condition', {'heart attack'}))
0.000184
Computing Block=scip-inf-2 18 out of 28
0.000192
Computing Block=ami-2 19 out of 28
Pruned:  df = swap(df,'Condition','heart tatack',('MeasureCode', {'ami-2'}))
Pruned:  df = swap(df,'Condition','heart attack',('MeasureCode', {'ami-2'}))
Pruned:  df = swap(df,'Condition','heart atjtack',('MeasureCode', {'ami-2'}))
Pruned:  df = swap(df,'MeasureCode','ami-2',('Condition', {'heart tatack'}))
Pruned:  df = swap(df,'MeasureCode','ami-2',('Condition', {'heart attack'}))
Pruned:  df = swap(df,'MeasureCode','ami-2',('Condition', {'heart atjtack'}))
Pruned:  df = swap(df,'Condition','heart tatack',('MeasureCode', {'ami-2'}))
Pruned:  df = swap(df,'Condition','heart attack',('MeasureCode', {'ami-2'}))
Pruned:  df = swap(df,'MeasureCode','ami-2',('Condition', {'heart tatack'}))
Pruned:  df = swap(df,'MeasureCode','ami-2',('Condition', {'heart attack'}))
0.000188
Computing Block=pn-3b 20 out of 28
0.000179
Computing Block=scip-inf-6 21 out of 28
0.000177
Computing Block=hf-2 22 out of 28
0.000174
Computing Block=ami-3 23 out of 28
0.000177
Computing Block=pn-7 24 out of 28
0.000183
Computing Block=hf-4 25 out of 28
0.00023
Computing Block=ami-7a 26 out of 28
0.000177
Computing Block=cac-1 27 out of 28
0.000151
Computing Block=ami-5 28 out of 28
0.000185
Computing Block=eliza coffee memorial hospital 1 out of 45
0.00017
Computing Block=shelby baptist medical center 2 out of 45
0.000165
Computing Block=medical center enterprise 3 out of 45
0.00019
Computing Block=marion regional medical center 4 out of 45
0.000174
Computing Block=univ of south alabama medical center 5 out of 45
0.000134
Computing Block=southeast alabama medical center 6 out of 45
0.000172
Computing Block=dekalb regional medical center 7 out of 45
0.000182
Computing Block=wedowee hospital 8 out of 45
0.000165
Computing Block=marshall medical center south 9 out of 45
0.000178
Computing Block=st vincents blount 10 out of 45
0.000166
Computing Block=yukon kuskokwim delta reg hospital 11 out of 45
0.000129
Computing Block=university of alabama hospital 12 out of 45
0.000162
Computing Block=crenshaw community hospital 13 out of 45
0.000174
Computing Block=helen keller memorial hospital 14 out of 45
Pruned:  df = swap(df,'Address1','1300 south montgomeryh avenue',('Address1', {'1300 south montgomery avenue'}))
Pruned:  df = swap(df,'Address1','1300 sout hmontgomery avenue',('Address1', {'1300 south montgomery avenue'}))
Pruned:  df = swap(df,'Address1','1300 south montgomery avenue',('Address1', {'1300 south montgomeryh avenue'}))
Pruned:  df = swap(df,'Address1','1300 sout hmontgomery avenue',('Address1', {'1300 south montgomeryh avenue'}))
Pruned:  df = swap(df,'Address1','1300 south montgomery avenue',('Address1', {'1300 sout hmontgomery avenue'}))
Pruned:  df = swap(df,'Address1','1300 south montgomeryh avenue',('Address1', {'1300 sout hmontgomery avenue'}))
0.0002
Computing Block=decatur general hospital 15 out of 45
0.000138
Computing Block=hartselle medical center 16 out of 45
0.000166
Computing Block=chilton medical center 17 out of 45
0.000173
Computing Block=georgiana hospital 18 out of 45
0.000182
Computing Block=cullman regional medical center 19 out of 45
0.00017
Computing Block=cherokee medical center 20 out of 45
0.000161
Computing Block=riverview regional medical center 21 out of 45
0.000163
Computing Block=northwest medical center 22 out of 45
0.000165
Computing Block=southwest alabama medical center 23 out of 45
0.000159
Computing Block=marshall medical center north 24 out of 45
0.000178
Computing Block=alaska regional hospital 25 out of 45
0.000171
Computing Block=flowers hospital 26 out of 45
0.000167
Computing Block=coosa valley medical center 27 out of 45
Pruned:  df = swap(df,'Address1','315 w hickory ts',('Address1', {'315 w hickory st'}))
Pruned:  df = swap(df,'Address1','315 w hickory st',('Address1', {'315 w hickory ts'}))
0.000188
Computing Block=jackson hospital & clinic inc 28 out of 45
0.000167
Computing Block=gadsden regional medical center 29 out of 45
0.000168
Computing Block=community hospital inc 30 out of 45
0.000165
Computing Block=st vincents hospital 31 out of 45
0.000129
Computing Block=elba general hospital 32 out of 45
0.000179
Computing Block=andalusia regional hospital 33 out of 45
Pruned:  df = swap(df,'HospitalName','andalusia regional hospital',('Address1', {'849 south thraee notch street'}))
Pruned:  df = swap(df,'HospitalName','andalusia regional hospital',('Address1', {'849 south three notch street'}))
Pruned:  df = swap(df,'Address1','849 south three notch street',('Address1', {'849 south thraee notch street'}))
Pruned:  df = swap(df,'Address1','849 south thraee notch street',('Address1', {'849 south three notch street'}))
0.000174
Computing Block=g h lanier memorial hospital 34 out of 45
0.000194
Computing Block=russellville hospital 35 out of 45
0.000132
Computing Block=baptist medical center south 36 out of 45
0.000189
Computing Block=callahan eye foundation hospital 37 out of 45
0.000164
Computing Block=st vincents east 38 out of 45
0.000173
Computing Block=prattville baptist hospital 39 out of 45
0.000161
Computing Block=huntsville hospital 40 out of 45
0.000194
Computing Block=fayette medical center 41 out of 45
0.000175
Computing Block=mizell memorial hospital 42 out of 45
0.000164
Computing Block=dale medical center 43 out of 45
0.000183
Computing Block=stringfellow memorial hospital 44 out of 45
0.000187
Computing Block=east alabama medical center and snf 45 out of 45
0.000171
Computing Block=eliza coffee memorial hospital 1 out of 45
0.000175
Computing Block=shelby baptist medical center 2 out of 45
0.000185
Computing Block=medical center enterprise 3 out of 45
0.000188
Computing Block=marion regional medical center 4 out of 45
0.000172
Computing Block=univ of south alabama medical center 5 out of 45
0.000141
Computing Block=southeast alabama medical center 6 out of 45
0.00017
Computing Block=dekalb regional medical center 7 out of 45
0.00017
Computing Block=wedowee hospital 8 out of 45
Pruned:  df = swap(df,'HospitalName','wedowee hospital',('HospitalOwner', {'government t- local'}))
Pruned:  df = swap(df,'HospitalName','wedowee hospital',('HospitalOwner', {'government - local'}))
0.000184
Computing Block=marshall medical center south 9 out of 45
0.000164
Computing Block=st vincents blount 10 out of 45
0.00016
Computing Block=yukon kuskokwim delta reg hospital 11 out of 45
0.000133
Computing Block=university of alabama hospital 12 out of 45
0.000192
Computing Block=crenshaw community hospital 13 out of 45
0.000194
Computing Block=helen keller memorial hospital 14 out of 45
Pruned:  df = swap(df,'HospitalName','helen keller memorial hospital',('HospitalOwner', {'government - hospital district or authority'}))
Pruned:  df = swap(df,'HospitalName','helen keller memorial hospital',('HospitalOwner', {'government - hospital district or autority'}))
Pruned:  df = swap(df,'HospitalName','helen keller memorial hospital',('HospitalOwner', {'government - hospitla district or authority'}))
Pruned:  df = swap(df,'HospitalOwner','government - hospital district or autority',('HospitalOwner', {'government - hospital district or authority'}))
Pruned:  df = swap(df,'HospitalOwner','government - hospitla district or authority',('HospitalOwner', {'government - hospital district or authority'}))
Pruned:  df = swap(df,'HospitalOwner','government - hospital district or authority',('HospitalOwner', {'government - hospital district or autority'}))
Pruned:  df = swap(df,'HospitalOwner','government - hospitla district or authority',('HospitalOwner', {'government - hospital district or autority'}))
Pruned:  df = swap(df,'HospitalOwner','government - hospital district or authority',('HospitalOwner', {'government - hospitla district or authority'}))
Pruned:  df = swap(df,'HospitalOwner','government - hospital district or autority',('HospitalOwner', {'government - hospitla district or authority'}))
0.000184
Computing Block=decatur general hospital 15 out of 45
0.000132
Computing Block=hartselle medical center 16 out of 45
0.000192
Computing Block=chilton medical center 17 out of 45
0.000189
Computing Block=georgiana hospital 18 out of 45
0.000165
Computing Block=cullman regional medical center 19 out of 45
0.000187
Computing Block=cherokee medical center 20 out of 45
0.000166
Computing Block=riverview regional medical center 21 out of 45
0.000167
Computing Block=northwest medical center 22 out of 45
0.000172
Computing Block=southwest alabama medical center 23 out of 45
0.000183
Computing Block=marshall medical center north 24 out of 45
0.000165
Computing Block=alaska regional hospital 25 out of 45
0.000165
Computing Block=flowers hospital 26 out of 45
0.000163
Computing Block=coosa valley medical center 27 out of 45
0.000161
Computing Block=jackson hospital & clinic inc 28 out of 45
0.000167
Computing Block=gadsden regional medical center 29 out of 45
0.000178
Computing Block=community hospital inc 30 out of 45
Pruned:  df = swap(df,'HospitalName','community hospital inc',('HospitalOwner', {'voluntary non-profit - private'}))
Pruned:  df = swap(df,'HospitalName','community hospital inc',('HospitalOwner', {'voluntary non-profit- private'}))
Pruned:  df = swap(df,'HospitalOwner','voluntary non-profit- private',('HospitalOwner', {'voluntary non-profit - private'}))
Pruned:  df = swap(df,'HospitalOwner','voluntary non-profit - private',('HospitalOwner', {'voluntary non-profit- private'}))
0.000179
Computing Block=st vincents hospital 31 out of 45
0.000132
Computing Block=elba general hospital 32 out of 45
0.000173
Computing Block=andalusia regional hospital 33 out of 45
0.000188
Computing Block=g h lanier memorial hospital 34 out of 45
Pruned:  df = swap(df,'HospitalOwner','voluntary non-profit - other',('HospitalOwner', {'voluntary non-prfoit - other'}))
Pruned:  df = swap(df,'HospitalOwner','voluntary non-prfoit - other',('HospitalOwner', {'voluntary non-profit - other'}))
0.000173
Computing Block=russellville hospital 35 out of 45
0.000134
Computing Block=baptist medical center south 36 out of 45
0.000169
Computing Block=callahan eye foundation hospital 37 out of 45
0.000187
Computing Block=st vincents east 38 out of 45
0.000187
Computing Block=prattville baptist hospital 39 out of 45
0.000298
Computing Block=huntsville hospital 40 out of 45
0.000183
Computing Block=fayette medical center 41 out of 45
0.000178
Computing Block=mizell memorial hospital 42 out of 45
0.000185
Computing Block=dale medical center 43 out of 45
0.000219
Computing Block=stringfellow memorial hospital 44 out of 45
0.000183
Computing Block=east alabama medical center and snf 45 out of 45
0.000212
Computing Block=fayette 1 out of 43
0.000201
Computing Block=montgomery 2 out of 43
0.000201
Computing Block=andalusia 3 out of 43
0.000186
Computing Block=anchorage 4 out of 43
0.00018
Computing Block=oneonta 5 out of 43
0.000181
Computing Block=hamilton 6 out of 43
0.000183
Computing Block=mobile 7 out of 43
0.000144
Computing Block=tallassee 8 out of 43
0.000212
Computing Block=opelika 9 out of 43
0.000204
Computing Block=fort payne 10 out of 43
0.000187
Computing Block=bethel 11 out of 43
0.000138
Computing Block=anniston 12 out of 43
0.000182
Computing Block=boaz 13 out of 43
0.000189
Computing Block=dothan 14 out of 43
0.000278
Computing Block=clanton 15 out of 43
0.000192
Computing Block=enterprise 16 out of 43
0.000197
Computing Block=hmailton 17 out of 43
0.000199
Computing Block=guntersville 18 out of 43
0.000187
Computing Block=birminghvam 19 out of 43
0.00014
Computing Block=florence 20 out of 43
0.00018
Computing Block=thomasville 21 out of 43
0.000189
Computing Block=elba 22 out of 43
0.000179
Computing Block=sheffield 23 out of 43
0.000183
Computing Block=wedowee 24 out of 43
0.000171
Computing Block=alabaster 25 out of 43
0.000169
Computing Block=opp 26 out of 43
0.000163
Computing Block=valley 27 out of 43
0.000164
Computing Block=decatur 28 out of 43
0.000129
Computing Block=georgiana 29 out of 43
0.000202
Computing Block=hartselle 30 out of 43
0.000197
Computing Block=russellville 31 out of 43
0.000143
Computing Block=prattville 32 out of 43
0.000173
Computing Block=cullman 33 out of 43
0.000189
Computing Block=ozark 34 out of 43
0.000184
Computing Block=birmingham 35 out of 43
Pruned:  df = swap(df,'City','birmingham',('CountyName', {'jefferson'}))
Pruned:  df = swap(df,'City','birmingham',('CountyName', {nan}))
Pruned:  df = swap(df,'City','birmingham',('CountyName', {'houston'}))
0.000188
Computing Block=sylacauga 36 out of 43
0.000169
Computing Block=bimingham 37 out of 43
0.000131
Computing Block=winfield 38 out of 43
0.000171
Computing Block=gadsden 39 out of 43
0.000175
Computing Block=clnton 40 out of 43
0.000128
Computing Block=luverne 41 out of 43
0.000183
Computing Block=centre 42 out of 43
0.00017
Computing Block=huntsville 43 out of 43
0.00017
Computing Block=35205 1 out of 44
0.000143
Computing Block=35594 2 out of 44
0.000174
Computing Block=35960 3 out of 44
0.000182
Computing Block=36106 4 out of 44
0.000173
Computing Block=35901 5 out of 44
0.000166
Computing Block=35957 6 out of 44
0.000172
Computing Block=35976 7 out of 44
0.000176
Computing Block=35660 8 out of 44
0.000187
Computing Block=36067 9 out of 44
0.000174
Computing Block=36467 10 out of 44
0.000181
Computing Block=36201 11 out of 44
0.000162
Computing Block=35903 12 out of 44
0.000166
Computing Block=35609 13 out of 44
0.000128
Computing Block=35121 14 out of 44
0.00017
Computing Block=99508 15 out of 44
0.000162
Computing Block=35555 16 out of 44
0.000163
Computing Block=36033 17 out of 44
0.000161
Computing Block=36305 18 out of 44
0.000161
Computing Block=36323 19 out of 44
0.000195
Computing Block=35045 20 out of 44
0.000167
Computing Block=35631 21 out of 44
0.000167
Computing Block=35570 22 out of 44
0.000166
Computing Block=36617 23 out of 44
0.000141
Computing Block=35235 24 out of 44
0.000167
Computing Block=36854 25 out of 44
0.000166
Computing Block=35233 26 out of 44
0.0002
Computing Block=36116 27 out of 44
Pruned:  df = swap(df,'EmergencyService','yes',('EmergencyService', {'es'}))
Pruned:  df = swap(df,'EmergencyService','es',('EmergencyService', {'yes'}))
0.000177
Computing Block=35801 28 out of 44
0.000172
Computing Block=36302 29 out of 44
0.000165
Computing Block=36420 30 out of 44
0.000206
Computing Block=36330 31 out of 44
0.000168
Computing Block=36278 32 out of 44
0.000165
Computing Block=36801 33 out of 44
0.000162
Computing Block=35968 34 out of 44
0.000164
Computing Block=35150 35 out of 44
0.000282
Computing Block=35058 36 out of 44
0.000165
Computing Block=36078 37 out of 44
Pruned:  df = swap(df,'EmergencyService','no',('EmergencyService', {'mno'}))
Pruned:  df = swap(df,'EmergencyService','mno',('EmergencyService', {'no'}))
0.000168
Computing Block=35007 38 out of 44
0.000167
Computing Block=36784 39 out of 44
0.000172
Computing Block=36049 40 out of 44
0.00017
Computing Block=35653 41 out of 44
0.000129
Computing Block=35640 42 out of 44
0.000174
Computing Block=99559 43 out of 44
0.000134
Computing Block=36360 44 out of 44
0.00017
Computing Block=eliza coffee memorial hospital 1 out of 45
0.000164
Computing Block=shelby baptist medical center 2 out of 45
0.000182
Computing Block=medical center enterprise 3 out of 45
0.00016
Computing Block=marion regional medical center 4 out of 45
0.000164
Computing Block=univ of south alabama medical center 5 out of 45
0.000149
Computing Block=southeast alabama medical center 6 out of 45
0.000148
Computing Block=dekalb regional medical center 7 out of 45
0.000154
Computing Block=wedowee hospital 8 out of 45
0.000171
Computing Block=marshall medical center south 9 out of 45
0.000161
Computing Block=st vincents blount 10 out of 45
0.000159
Computing Block=yukon kuskokwim delta reg hospital 11 out of 45
0.000152
Computing Block=university of alabama hospital 12 out of 45
0.000186
Computing Block=crenshaw community hospital 13 out of 45
0.000165
Computing Block=helen keller memorial hospital 14 out of 45
0.000173
Computing Block=decatur general hospital 15 out of 45
0.00013
Computing Block=hartselle medical center 16 out of 45
0.000167
Computing Block=chilton medical center 17 out of 45
Pruned:  df = swap(df,'HospitalName','chilton medical center',('City', {'clnton'}))
Pruned:  df = swap(df,'HospitalName','chilton medical center',('City', {'clanton'}))
0.000164
Computing Block=georgiana hospital 18 out of 45
0.000174
Computing Block=cullman regional medical center 19 out of 45
0.000168
Computing Block=cherokee medical center 20 out of 45
0.000165
Computing Block=riverview regional medical center 21 out of 45
0.000161
Computing Block=northwest medical center 22 out of 45
0.000183
Computing Block=southwest alabama medical center 23 out of 45
0.000173
Computing Block=marshall medical center north 24 out of 45
0.000167
Computing Block=alaska regional hospital 25 out of 45
0.000158
Computing Block=flowers hospital 26 out of 45
0.000165
Computing Block=coosa valley medical center 27 out of 45
0.000162
Computing Block=jackson hospital & clinic inc 28 out of 45
0.000161
Computing Block=gadsden regional medical center 29 out of 45
0.000167
Computing Block=community hospital inc 30 out of 45
0.000156
Computing Block=st vincents hospital 31 out of 45
0.000143
Computing Block=elba general hospital 32 out of 45
0.000169
Computing Block=andalusia regional hospital 33 out of 45
0.000185
Computing Block=g h lanier memorial hospital 34 out of 45
0.000166
Computing Block=russellville hospital 35 out of 45
0.000127
Computing Block=baptist medical center south 36 out of 45
0.000171
Computing Block=callahan eye foundation hospital 37 out of 45
Pruned:  df = swap(df,'HospitalName','callahan eye foundation hospital',('City', {'birminghvam'}))
Pruned:  df = swap(df,'HospitalName','callahan eye foundation hospital',('City', {'bimingham'}))
Pruned:  df = swap(df,'HospitalName','callahan eye foundation hospital',('City', {'birmingham'}))
0.000175
Computing Block=st vincents east 38 out of 45
0.000159
Computing Block=prattville baptist hospital 39 out of 45
0.000164
Computing Block=huntsville hospital 40 out of 45
0.000165
Computing Block=fayette medical center 41 out of 45
0.000161
Computing Block=mizell memorial hospital 42 out of 45
0.000163
Computing Block=dale medical center 43 out of 45
0.000182
Computing Block=stringfellow memorial hospital 44 out of 45
0.00017
Computing Block=east alabama medical center and snf 45 out of 45
0.000183
time cost 296.7212612628937 s
Initial Errors: 71.0, Remaining Errors: 32.0
打印 dirty_values 和 clean_values 不同的那些行
Dirty Values at mismatched indices:
18     1300 south montgomeryh avenue
430                 315 w hickory ts
452     1300 sout hmontgomery avenue
685           619 south 19th streemt
745    849 south thraee notch street
897        1653 templen avenue north
Name: Address1, dtype: object
Clean Values at mismatched indices:
18     1300 south montgomery avenue
430                315 w hickory st
452    1300 south montgomery avenue
685           619 south 19th street
745    849 south three notch street
897        1653 temple avenue north
Name: Address1, dtype: object
========================================
打印没修复的数据
Dirty Values at false positive indices:
Series([], Name: Address1, dtype: object)
Clean Values at false positive indices:
Series([], Name: Address1, dtype: object)
Cleaned Values at false positive indices:
Series([], Name: Address1, dtype: object)
========================================
Attribute: Address1 修复正确的数据: 6 修复错误的数据: 0 应该修复的数据: 6
打印 dirty_values 和 clean_values 不同的那些行
Dirty Values at mismatched indices:
0      birminghvam
19      birmingham
20      birmingham
310      bimingham
844         clnton
854       hmailton
Name: City, dtype: object
Clean Values at mismatched indices:
0      birmingham
19         dothan
20         dothan
310    birmingham
844       clanton
854      hamilton
Name: City, dtype: object
========================================
打印没修复的数据
Dirty Values at false positive indices:
Series([], Name: City, dtype: object)
Clean Values at false positive indices:
Series([], Name: City, dtype: object)
Cleaned Values at false positive indices:
Series([], Name: City, dtype: object)
========================================
Attribute: City 修复正确的数据: 6 修复错误的数据: 0 应该修复的数据: 6
打印 dirty_values 和 clean_values 不同的那些行
Dirty Values at mismatched indices:
326                       penumonia
394                 heart attack***
642                   heart atjtack
666                   hearbt attack
667                    heart tatack
764    sugical infection prevention
851    surgical infection prevenion
Name: Condition, dtype: object
Clean Values at mismatched indices:
326                        pneumonia
394                     heart attack
642                     heart attack
666                     heart attack
667                     heart attack
764    surgical infection prevention
851    surgical infection prevention
Name: Condition, dtype: object
========================================
打印没修复的数据
Dirty Values at false positive indices:
Series([], Name: Condition, dtype: object)
Clean Values at false positive indices:
Series([], Name: Condition, dtype: object)
Cleaned Values at false positive indices:
Series([], Name: Condition, dtype: object)
========================================
Attribute: Condition 修复正确的数据: 7 修复错误的数据: 0 应该修复的数据: 7
打印 dirty_values 和 clean_values 不同的那些行
Dirty Values at mismatched indices:
63     NaN
283    NaN
286    NaN
687    NaN
Name: CountyName, dtype: object
Clean Values at mismatched indices:
63      marshall
283       shelby
286       shelby
687    jefferson
Name: CountyName, dtype: object
========================================
打印没修复的数据
Dirty Values at false positive indices:
Series([], Name: CountyName, dtype: object)
Clean Values at false positive indices:
Series([], Name: CountyName, dtype: object)
Cleaned Values at false positive indices:
Series([], Name: CountyName, dtype: object)
========================================
Attribute: CountyName 修复正确的数据: 4 修复错误的数据: 2 应该修复的数据: 4
打印 dirty_values 和 clean_values 不同的那些行
Dirty Values at mismatched indices:
521     es
679    yse
680     es
710    mno
Name: EmergencyService, dtype: object
Clean Values at mismatched indices:
521    yes
679    yes
680    yes
710     no
Name: EmergencyService, dtype: object
========================================
打印没修复的数据
Dirty Values at false positive indices:
Series([], Name: EmergencyService, dtype: object)
Clean Values at false positive indices:
Series([], Name: EmergencyService, dtype: object)
Cleaned Values at false positive indices:
Series([], Name: EmergencyService, dtype: object)
========================================
Attribute: EmergencyService 修复正确的数据: 4 修复错误的数据: 0 应该修复的数据: 4
打印 dirty_values 和 clean_values 不同的那些行
Dirty Values at mismatched indices:
Series([], Name: HospitalName, dtype: object)
Clean Values at mismatched indices:
Series([], Name: HospitalName, dtype: object)
========================================
打印没修复的数据
Dirty Values at false positive indices:
Series([], Name: HospitalName, dtype: object)
Clean Values at false positive indices:
Series([], Name: HospitalName, dtype: object)
Cleaned Values at false positive indices:
Series([], Name: HospitalName, dtype: object)
========================================
Attribute: HospitalName 修复正确的数据: 0 修复错误的数据: 0 应该修复的数据: 0
打印 dirty_values 和 clean_values 不同的那些行
Dirty Values at mismatched indices:
461    government - hospitla district or authority
462     government - hospital district or autority
578                   voluntary non-prfoit - other
660                            government t- local
713                  voluntary non-profit- private
857                voluntary non-profit - privarte
Name: HospitalOwner, dtype: object
Clean Values at mismatched indices:
461    government - hospital district or authority
462    government - hospital district or authority
578                   voluntary non-profit - other
660                             government - local
713                 voluntary non-profit - private
857                 voluntary non-profit - private
Name: HospitalOwner, dtype: object
========================================
打印没修复的数据
Dirty Values at false positive indices:
Series([], Name: HospitalOwner, dtype: object)
Clean Values at false positive indices:
Series([], Name: HospitalOwner, dtype: object)
Cleaned Values at false positive indices:
Series([], Name: HospitalOwner, dtype: object)
========================================
Attribute: HospitalOwner 修复正确的数据: 6 修复错误的数据: 0 应该修复的数据: 6
打印 dirty_values 和 clean_values 不同的那些行
Dirty Values at mismatched indices:
46     acutee care hospitals
350      acue care hospitals
416    acute care hospitales
653    aqcute care hospitals
898     acute car ehospitals
955    acute care hospidtals
Name: HospitalType, dtype: object
Clean Values at mismatched indices:
46     acute care hospitals
350    acute care hospitals
416    acute care hospitals
653    acute care hospitals
898    acute care hospitals
955    acute care hospitals
Name: HospitalType, dtype: object
========================================
打印没修复的数据
Dirty Values at false positive indices:
Series([], Name: HospitalType, dtype: object)
Clean Values at false positive indices:
Series([], Name: HospitalType, dtype: object)
Cleaned Values at false positive indices:
Series([], Name: HospitalType, dtype: object)
========================================
Attribute: HospitalType 修复正确的数据: 6 修复错误的数据: 0 应该修复的数据: 6
打印 dirty_values 和 clean_values 不同的那些行
Dirty Values at mismatched indices:
40     scimp-inf-4
49           am-7a
59             p-6
256    scip-card-2
257    scip-card-2
276    scip-card-2
277    scip-card-2
287    scip-card-2
288    scip-card-2
487     scip-nif-4
Name: MeasureCode, dtype: object
Clean Values at mismatched indices:
40     scip-inf-4
49         ami-7a
59           pn-6
256         pn-3b
257          pn-4
276          hf-1
277          hf-2
287    scip-inf-1
288    scip-inf-2
487    scip-inf-4
Name: MeasureCode, dtype: object
========================================
打印没修复的数据
Dirty Values at false positive indices:
288    scip-card-2
Name: MeasureCode, dtype: object
Clean Values at false positive indices:
288    scip-inf-2
Name: MeasureCode, dtype: object
Cleaned Values at false positive indices:
288    scip-card-2
Name: MeasureCode, dtype: object
========================================
Attribute: MeasureCode 修复正确的数据: 9 修复错误的数据: 2 应该修复的数据: 10
打印 dirty_values 和 clean_values 不同的那些行
Dirty Values at mismatched indices:
16     surgery patients who were taking heart drugs c...
17     surgery patients who were taking heart drugs c...
414        hear attack patients given aspirin at arrival
616       heart attack patients given sapirin at arrival
Name: MeasureName, dtype: object
Clean Values at mismatched indices:
16     heart failure patients given an evaluation of ...
17     heart failure patients given ace inhibitor or ...
414       heart attack patients given aspirin at arrival
616       heart attack patients given aspirin at arrival
Name: MeasureName, dtype: object
========================================
打印没修复的数据
Dirty Values at false positive indices:
16     surgery patients who were taking heart drugs c...
17     surgery patients who were taking heart drugs c...
414        hear attack patients given aspirin at arrival
616       heart attack patients given sapirin at arrival
Name: MeasureName, dtype: object
Clean Values at false positive indices:
16     heart failure patients given an evaluation of ...
17     heart failure patients given ace inhibitor or ...
414       heart attack patients given aspirin at arrival
616       heart attack patients given aspirin at arrival
Name: MeasureName, dtype: object
Cleaned Values at false positive indices:
16     surgery patients who were taking heart drugs c...
17     surgery patients who were taking heart drugs c...
414        hear attack patients given aspirin at arrival
616       heart attack patients given sapirin at arrival
Name: MeasureName, dtype: object
========================================
Attribute: MeasureName 修复正确的数据: 0 修复错误的数据: 0 应该修复的数据: 4
打印 dirty_values 和 clean_values 不同的那些行
Dirty Values at mismatched indices:
455       2563846556
456    2563864556***
503      k2569275531
839       2057555200
Name: PhoneNumber, dtype: object
Clean Values at mismatched indices:
455    2563864556
456    2563864556
503    2569275531
839    2057552500
Name: PhoneNumber, dtype: object
========================================
打印没修复的数据
Dirty Values at false positive indices:
Series([], Name: PhoneNumber, dtype: object)
Clean Values at false positive indices:
Series([], Name: PhoneNumber, dtype: object)
Cleaned Values at false positive indices:
Series([], Name: PhoneNumber, dtype: object)
========================================
Attribute: PhoneNumber 修复正确的数据: 4 修复错误的数据: 0 应该修复的数据: 4
打印 dirty_values 和 clean_values 不同的那些行
Dirty Values at mismatched indices:
155       10018
156       01009
454        1019
455       01019
872      1j0044
878    10045***
Name: ProviderNumber, dtype: object
Clean Values at mismatched indices:
155    10009
156    10009
454    10019
455    10019
872    10044
878    10045
Name: ProviderNumber, dtype: object
========================================
打印没修复的数据
Dirty Values at false positive indices:
Series([], Name: ProviderNumber, dtype: object)
Clean Values at false positive indices:
Series([], Name: ProviderNumber, dtype: object)
Cleaned Values at false positive indices:
Series([], Name: ProviderNumber, dtype: object)
========================================
Attribute: ProviderNumber 修复正确的数据: 6 修复错误的数据: 0 应该修复的数据: 6
打印 dirty_values 和 clean_values 不同的那些行
Dirty Values at mismatched indices:
261    ayl
855    fal
Name: State, dtype: object
Clean Values at mismatched indices:
261    al
855    al
Name: State, dtype: object
========================================
打印没修复的数据
Dirty Values at false positive indices:
Series([], Name: State, dtype: object)
Clean Values at false positive indices:
Series([], Name: State, dtype: object)
Cleaned Values at false positive indices:
Series([], Name: State, dtype: object)
========================================
Attribute: State 修复正确的数据: 2 修复错误的数据: 0 应该修复的数据: 2
打印 dirty_values 和 clean_values 不同的那些行
Dirty Values at mismatched indices:
59        a_pn-6
415    afl_ami-2
467    al_ambi-2
Name: Stateavg, dtype: object
Clean Values at mismatched indices:
59      al_pn-6
415    al_ami-2
467    al_ami-2
Name: Stateavg, dtype: object
========================================
打印没修复的数据
Dirty Values at false positive indices:
Series([], Name: Stateavg, dtype: object)
Clean Values at false positive indices:
Series([], Name: Stateavg, dtype: object)
Cleaned Values at false positive indices:
Series([], Name: Stateavg, dtype: object)
========================================
Attribute: Stateavg 修复正确的数据: 3 修复错误的数据: 23 应该修复的数据: 3
打印 dirty_values 和 clean_values 不同的那些行
Dirty Values at mismatched indices:
68        53957
277        3507
297        5233
298    35233***
864        3550
Name: ZipCode, dtype: object
Clean Values at mismatched indices:
68     35957
277    35007
297    35233
298    35233
864    35570
Name: ZipCode, dtype: object
========================================
打印没修复的数据
Dirty Values at false positive indices:
Series([], Name: ZipCode, dtype: object)
Clean Values at false positive indices:
Series([], Name: ZipCode, dtype: object)
Cleaned Values at false positive indices:
Series([], Name: ZipCode, dtype: object)
========================================
Attribute: ZipCode 修复正确的数据: 5 修复错误的数据: 0 应该修复的数据: 5
F1 值: 0.8095238095238095
总准确率: 0.7157894736842105 总召回率: 0.9315068493150684
Time Cost: 296.7212612628937s

进程已结束，退出代码为 0
